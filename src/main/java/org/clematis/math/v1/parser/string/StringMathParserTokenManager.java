/* Generated By:JJTree&JavaCC: Do not edit this line. StringMathParserTokenManager.java */
package org.clematis.math.v1.parser.string;

public class StringMathParserTokenManager implements StringMathParserConstants {
    public java.io.PrintStream debugStream = System.out;

    public void setDebugStream(java.io.PrintStream ds) {
        debugStream = ds;
    }

    private final int jjStopStringLiteralDfa_0(int pos, long active0) {
        switch (pos) {
            case 0:
                if ((active0 & 0x3fffffff804000L) != 0L) {
                    jjmatchedKind = 11;
                    return 71;
                }
                if ((active0 & 0x10000L) != 0L) {
                    return 110;
                }
                return -1;
            case 1:
                if ((active0 & 0x3ffff3ff800000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 11;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                return -1;
            case 2:
                if ((active0 & 0x3ffff3ff800000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 11;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                return -1;
            case 3:
                if ((active0 & 0x3ffde215000000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 11;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                return -1;
            case 4:
                if ((active0 & 0x2aa9c015000000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 11;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                return -1;
            case 5:
                if ((active0 & 0x2aa9c015000000L) != 0L) {
                    if (jjmatchedPos == 0) {
                        jjmatchedKind = 11;
                        jjmatchedPos = 0;
                    }
                    return -1;
                }
                return -1;
            default:
                return -1;
        }
    }

    private final int jjStartNfa_0(int pos, long active0) {
        return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
    }

    private final int jjStopAtPos(int pos, int kind) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        return pos + 1;
    }

    private final int jjStartNfaWithStates_0(int pos, int kind, int state) {
        jjmatchedKind = kind;
        jjmatchedPos = pos;
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            return pos + 1;
        }
        return jjMoveNfa_0(state, pos + 1);
    }

    private final int jjMoveStringLiteralDfa0_0() {
        switch (curChar) {
            case 42:
                return jjStopAtPos(0, 15);
            case 43:
                return jjStopAtPos(0, 17);
            case 45:
                return jjStopAtPos(0, 18);
            case 47:
                return jjStartNfaWithStates_0(0, 16, 110);
            case 61:
                return jjStopAtPos(0, 19);
            case 94:
                return jjStopAtPos(0, 20);
            case 97:
                return jjMoveStringLiteralDfa1_0(0x2aabc015000000L);
            case 99:
                return jjMoveStringLiteralDfa1_0(0x111000c2000000L);
            case 101:
                return jjMoveStringLiteralDfa1_0(0x100000000L);
            case 102:
                return jjMoveStringLiteralDfa1_0(0x2000000000L);
            case 108:
                return jjMoveStringLiteralDfa1_0(0x1c00000000L);
            case 112:
                return jjMoveStringLiteralDfa1_0(0x4000L);
            case 115:
                return jjMoveStringLiteralDfa1_0(0x4040220800000L);
            case 116:
                return jjMoveStringLiteralDfa1_0(0x400008000000L);
            default:
                return jjMoveNfa_0(0, 0);
        }
    }

    private final int jjMoveStringLiteralDfa1_0(long active0) {
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(0, active0);
            return 1;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa2_0(active0, 0x402008000000L);
            case 98:
                return jjMoveStringLiteralDfa2_0(active0, 0x20000000000L);
            case 101:
                return jjMoveStringLiteralDfa2_0(active0, 0x4000020000000L);
            case 103:
                if ((active0 & 0x800000000L) != 0L) {
                    return jjStopAtPos(1, 35);
                }
                break;
            case 105:
                if ((active0 & 0x4000L) != 0L) {
                    return jjStopAtPos(1, 14);
                }
                return jjMoveStringLiteralDfa2_0(active0, 0x40000800000L);
            case 110:
                if ((active0 & 0x400000000L) != 0L) {
                    return jjStopAtPos(1, 34);
                }
                break;
            case 111:
                return jjMoveStringLiteralDfa2_0(active0, 0x1101082000000L);
            case 113:
                return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
            case 114:
                return jjMoveStringLiteralDfa2_0(active0, 0x2aa9c015000000L);
            case 115:
                return jjMoveStringLiteralDfa2_0(active0, 0x10000040000000L);
            case 120:
                return jjMoveStringLiteralDfa2_0(active0, 0x100000000L);
            default:
                break;
        }
        return jjStartNfa_0(0, active0);
    }

    private final int jjMoveStringLiteralDfa2_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(0, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(1, active0);
            return 2;
        }
        switch (curChar) {
            case 99:
                if ((active0 & 0x20000000L) != 0L) {
                    jjmatchedKind = 29;
                    jjmatchedPos = 2;
                } else if ((active0 & 0x40000000L) != 0L) {
                    jjmatchedKind = 30;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x3ea9e015000000L);
            case 103:
                if ((active0 & 0x1000000000L) != 0L) {
                    return jjStopAtPos(2, 36);
                }
                break;
            case 110:
                if ((active0 & 0x800000L) != 0L) {
                    jjmatchedKind = 23;
                    jjmatchedPos = 2;
                } else if ((active0 & 0x8000000L) != 0L) {
                    jjmatchedKind = 27;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x440000000000L);
            case 112:
                if ((active0 & 0x100000000L) != 0L) {
                    return jjStopAtPos(2, 32);
                }
                break;
            case 114:
                return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
            case 115:
                if ((active0 & 0x2000000L) != 0L) {
                    jjmatchedKind = 25;
                    jjmatchedPos = 2;
                } else if ((active0 & 0x20000000000L) != 0L) {
                    return jjStopAtPos(2, 41);
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
            case 116:
                if ((active0 & 0x80000000L) != 0L) {
                    jjmatchedKind = 31;
                    jjmatchedPos = 2;
                }
                return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
            default:
                break;
        }
        return jjStartNfa_0(1, active0);
    }

    private final int jjMoveStringLiteralDfa3_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(1, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(2, active0);
            return 3;
        }
        switch (curChar) {
            case 99:
                return jjMoveStringLiteralDfa4_0(active0, 0x22214004000000L);
            case 104:
                if ((active0 & 0x40000000000L) != 0L) {
                    return jjStopAtPos(3, 42);
                } else if ((active0 & 0x100000000000L) != 0L) {
                    return jjStopAtPos(3, 44);
                } else if ((active0 & 0x400000000000L) != 0L) {
                    return jjStopAtPos(3, 46);
                } else if ((active0 & 0x1000000000000L) != 0L) {
                    return jjStopAtPos(3, 48);
                } else if ((active0 & 0x4000000000000L) != 0L) {
                    return jjStopAtPos(3, 50);
                } else if ((active0 & 0x10000000000000L) != 0L) {
                    return jjStopAtPos(3, 52);
                }
                break;
            case 115:
                return jjMoveStringLiteralDfa4_0(active0, 0x8088001000000L);
            case 116:
                if ((active0 & 0x200000000L) != 0L) {
                    return jjStopAtPos(3, 33);
                } else if ((active0 & 0x2000000000L) != 0L) {
                    return jjStopAtPos(3, 37);
                }
                return jjMoveStringLiteralDfa4_0(active0, 0x800010000000L);
            default:
                break;
        }
        return jjStartNfa_0(2, active0);
    }

    private final int jjMoveStringLiteralDfa4_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(2, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(3, active0);
            return 4;
        }
        switch (curChar) {
            case 97:
                return jjMoveStringLiteralDfa5_0(active0, 0x800010000000L);
            case 101:
                return jjMoveStringLiteralDfa5_0(active0, 0x8008000000000L);
            case 105:
                return jjMoveStringLiteralDfa5_0(active0, 0x80001000000L);
            case 111:
                return jjMoveStringLiteralDfa5_0(active0, 0x2204004000000L);
            case 115:
                return jjMoveStringLiteralDfa5_0(active0, 0x20010000000000L);
            default:
                break;
        }
        return jjStartNfa_0(3, active0);
    }

    private final int jjMoveStringLiteralDfa5_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(3, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(4, active0);
            return 5;
        }
        switch (curChar) {
            case 99:
                if ((active0 & 0x8000000000L) != 0L) {
                    jjmatchedKind = 39;
                    jjmatchedPos = 5;
                } else if ((active0 & 0x10000000000L) != 0L) {
                    jjmatchedKind = 40;
                    jjmatchedPos = 5;
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x28000000000000L);
            case 110:
                if ((active0 & 0x1000000L) != 0L) {
                    jjmatchedKind = 24;
                    jjmatchedPos = 5;
                } else if ((active0 & 0x10000000L) != 0L) {
                    jjmatchedKind = 28;
                    jjmatchedPos = 5;
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x880000000000L);
            case 115:
                if ((active0 & 0x4000000L) != 0L) {
                    jjmatchedKind = 26;
                    jjmatchedPos = 5;
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x200000000000L);
            case 116:
                if ((active0 & 0x4000000000L) != 0L) {
                    jjmatchedKind = 38;
                    jjmatchedPos = 5;
                }
                return jjMoveStringLiteralDfa6_0(active0, 0x2000000000000L);
            default:
                break;
        }
        return jjStartNfa_0(4, active0);
    }

    private final int jjMoveStringLiteralDfa6_0(long old0, long active0) {
        if (((active0 &= old0)) == 0L) {
            return jjStartNfa_0(4, old0);
        }
        try {
            curChar = input_stream.readChar();
        } catch (java.io.IOException e) {
            jjStopStringLiteralDfa_0(5, active0);
            return 6;
        }
        switch (curChar) {
            case 104:
                if ((active0 & 0x80000000000L) != 0L) {
                    return jjStopAtPos(6, 43);
                } else if ((active0 & 0x200000000000L) != 0L) {
                    return jjStopAtPos(6, 45);
                } else if ((active0 & 0x800000000000L) != 0L) {
                    return jjStopAtPos(6, 47);
                } else if ((active0 & 0x2000000000000L) != 0L) {
                    return jjStopAtPos(6, 49);
                } else if ((active0 & 0x8000000000000L) != 0L) {
                    return jjStopAtPos(6, 51);
                } else if ((active0 & 0x20000000000000L) != 0L) {
                    return jjStopAtPos(6, 53);
                }
                break;
            default:
                break;
        }
        return jjStartNfa_0(5, active0);
    }

    private final void jjCheckNAdd(int state) {
        if (jjrounds[state] != jjround) {
            jjstateSet[jjnewStateCnt++] = state;
            jjrounds[state] = jjround;
        }
    }

    private final void jjAddStates(int start, int end) {
        do {
            jjstateSet[jjnewStateCnt++] = jjnextStates[start];
        } while (start++ != end);
    }

    private final void jjCheckNAddTwoStates(int state1, int state2) {
        jjCheckNAdd(state1);
        jjCheckNAdd(state2);
    }

    private final void jjCheckNAddStates(int start, int end) {
        do {
            jjCheckNAdd(jjnextStates[start]);
        } while (start++ != end);
    }

    private final void jjCheckNAddStates(int start) {
        jjCheckNAdd(jjnextStates[start]);
        jjCheckNAdd(jjnextStates[start + 1]);
    }

    static final long[] jjbitVec0 = {
        0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
    };

    private final int jjMoveNfa_0(int startState, int curPos) {
        int[] nextStates;
        int startsAt = 0;
        jjnewStateCnt = 121;
        int i = 1;
        jjstateSet[0] = startState;
        int j, kind = 0x7fffffff;
        for (; ; ) {
            if (++jjround == 0x7fffffff) {
                ReInitRounds();
            }
            if (curChar < 64) {
                long l = 1L << curChar;
                do {
                    switch (jjstateSet[--i]) {
                        case 110:
                            if (curChar == 42) {
                                jjCheckNAddTwoStates(116, 117);
                            } else if (curChar == 47) {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 0:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 7) {
                                    kind = 7;
                                }
                                jjCheckNAddStates(3, 8);
                            } else if (curChar == 47) {
                                jjAddStates(9, 10);
                            } else if (curChar == 41) {
                                if (kind > 22) {
                                    kind = 22;
                                }
                            } else if (curChar == 40) {
                                if (kind > 21) {
                                    kind = 21;
                                }
                            } else if (curChar == 36) {
                                jjAddStates(11, 12);
                            } else if (curChar == 46) {
                                jjCheckNAdd(3);
                            }
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 7) {
                                    kind = 7;
                                }
                                jjCheckNAdd(1);
                            }
                            break;
                        case 71:
                            if ((0x3ff000000000000L & l) != 0L) {
                                if (kind > 11) {
                                    kind = 11;
                                }
                                jjCheckNAddStates(13, 18);
                            } else if (curChar == 46) {
                                jjCheckNAdd(75);
                            }
                            if ((0x3fe000000000000L & l) != 0L) {
                                if (kind > 11) {
                                    kind = 11;
                                }
                                jjCheckNAdd(73);
                            }
                            break;
                        case 1:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAdd(1);
                            break;
                        case 2:
                            if (curChar == 46) {
                                jjCheckNAdd(3);
                            }
                            break;
                        case 3:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAddTwoStates(3, 4);
                            break;
                        case 5:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(6);
                            }
                            break;
                        case 6:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAdd(6);
                            break;
                        case 7:
                            if (curChar == 36) {
                                jjAddStates(11, 12);
                            }
                            break;
                        case 12:
                            if (curChar == 46) {
                                jjCheckNAdd(13);
                            }
                            break;
                        case 13:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(19, 24);
                            break;
                        case 15:
                            if ((0x280000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 16;
                            }
                            break;
                        case 16:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(25, 29);
                            break;
                        case 17:
                            if ((0x3fe000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(30, 34);
                            break;
                        case 19:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(35, 45);
                            break;
                        case 20:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(20, 21);
                            }
                            break;
                        case 21:
                            if (curChar != 46) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(46, 51);
                            break;
                        case 23:
                            if ((0x280000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 24;
                            }
                            break;
                        case 24:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(52, 56);
                            break;
                        case 25:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(57, 67);
                            break;
                        case 26:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(26, 27);
                            }
                            break;
                        case 28:
                            if ((0x280000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 29;
                            }
                            break;
                        case 29:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(68, 72);
                            break;
                        case 30:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(73, 83);
                            break;
                        case 32:
                            if ((0x280000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 33;
                            }
                            break;
                        case 33:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(84, 88);
                            break;
                        case 34:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(89, 99);
                            break;
                        case 35:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(100, 109);
                            break;
                        case 36:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(110, 121);
                            break;
                        case 37:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(122, 132);
                            break;
                        case 38:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(133, 144);
                            break;
                        case 40:
                            if (curChar == 46) {
                                jjCheckNAddTwoStates(41, 13);
                            }
                            break;
                        case 41:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(145, 151);
                            break;
                        case 43:
                            if ((0x280000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 44;
                            }
                            break;
                        case 44:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(152, 157);
                            break;
                        case 45:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(158, 178);
                            break;
                        case 46:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(46, 47);
                            }
                            break;
                        case 47:
                            if (curChar != 46) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(179, 185);
                            break;
                        case 49:
                            if ((0x280000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 50;
                            }
                            break;
                        case 50:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(186, 191);
                            break;
                        case 51:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(192, 212);
                            break;
                        case 52:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(52, 53);
                            }
                            break;
                        case 54:
                            if ((0x280000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 55;
                            }
                            break;
                        case 55:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(213, 218);
                            break;
                        case 56:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(219, 239);
                            break;
                        case 58:
                            if ((0x280000000000L & l) != 0L) {
                                jjstateSet[jjnewStateCnt++] = 59;
                            }
                            break;
                        case 59:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(240, 245);
                            break;
                        case 60:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(246, 266);
                            break;
                        case 61:
                            if ((0x3fe000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(267, 276);
                            break;
                        case 62:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(277, 297);
                            break;
                        case 63:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(298, 317);
                            break;
                        case 64:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(318, 339);
                            break;
                        case 65:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(340, 361);
                            break;
                        case 66:
                            if (curChar == 40 && kind > 21) {
                                kind = 21;
                            }
                            break;
                        case 67:
                            if (curChar == 41 && kind > 22) {
                                kind = 22;
                            }
                            break;
                        case 72:
                            if ((0x3fe000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAdd(73);
                            break;
                        case 73:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAdd(73);
                            break;
                        case 74:
                            if (curChar == 46) {
                                jjCheckNAdd(75);
                            }
                            break;
                        case 75:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAddTwoStates(75, 76);
                            break;
                        case 77:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(78);
                            }
                            break;
                        case 78:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAdd(78);
                            break;
                        case 79:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAddStates(13, 18);
                            break;
                        case 80:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAddTwoStates(80, 81);
                            break;
                        case 82:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(83);
                            }
                            break;
                        case 83:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAdd(83);
                            break;
                        case 84:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(84, 85);
                            }
                            break;
                        case 86:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(87);
                            }
                            break;
                        case 87:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAdd(87);
                            break;
                        case 88:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(88, 89);
                            }
                            break;
                        case 89:
                            if (curChar != 46) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAddTwoStates(90, 91);
                            break;
                        case 90:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAddTwoStates(90, 91);
                            break;
                        case 92:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(93);
                            }
                            break;
                        case 93:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAdd(93);
                            break;
                        case 94:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAddStates(3, 8);
                            break;
                        case 95:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAddTwoStates(95, 96);
                            break;
                        case 97:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(98);
                            }
                            break;
                        case 98:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAdd(98);
                            break;
                        case 99:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(99, 100);
                            }
                            break;
                        case 101:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(102);
                            }
                            break;
                        case 102:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAdd(102);
                            break;
                        case 103:
                            if ((0x3ff000000000000L & l) != 0L) {
                                jjCheckNAddTwoStates(103, 104);
                            }
                            break;
                        case 104:
                            if (curChar != 46) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAddTwoStates(105, 106);
                            break;
                        case 105:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAddTwoStates(105, 106);
                            break;
                        case 107:
                            if ((0x280000000000L & l) != 0L) {
                                jjCheckNAdd(108);
                            }
                            break;
                        case 108:
                            if ((0x3ff000000000000L & l) == 0L) {
                                break;
                            }
                            if (kind > 7) {
                                kind = 7;
                            }
                            jjCheckNAdd(108);
                            break;
                        case 109:
                            if (curChar == 47) {
                                jjAddStates(9, 10);
                            }
                            break;
                        case 111:
                            if ((0xffffffffffffdbffL & l) != 0L) {
                                jjCheckNAddStates(0, 2);
                            }
                            break;
                        case 112:
                            if ((0x2400L & l) != 0L && kind > 5) {
                                kind = 5;
                            }
                            break;
                        case 113:
                            if (curChar == 10 && kind > 5) {
                                kind = 5;
                            }
                            break;
                        case 114:
                            if (curChar == 13) {
                                jjstateSet[jjnewStateCnt++] = 113;
                            }
                            break;
                        case 115:
                            if (curChar == 42) {
                                jjCheckNAddTwoStates(116, 117);
                            }
                            break;
                        case 116:
                            if ((0xfffffbffffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(116, 117);
                            }
                            break;
                        case 117:
                            if (curChar == 42) {
                                jjAddStates(362, 363);
                            }
                            break;
                        case 118:
                            if ((0xffff7fffffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(119, 117);
                            }
                            break;
                        case 119:
                            if ((0xfffffbffffffffffL & l) != 0L) {
                                jjCheckNAddTwoStates(119, 117);
                            }
                            break;
                        case 120:
                            if (curChar == 47 && kind > 6) {
                                kind = 6;
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else if (curChar < 128) {
                long l = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 0:
                            if ((0x7fffffe07fffffeL & l) != 0L) {
                                if (kind > 11) {
                                    kind = 11;
                                }
                                jjCheckNAddStates(364, 368);
                            } else if ((0x2000000020000000L & l) != 0L) {
                                if (kind > 22) {
                                    kind = 22;
                                }
                            } else if ((0x800000008000000L & l) != 0L) {
                                if (kind > 21) {
                                    kind = 21;
                                }
                            }
                            break;
                        case 71:
                            if (curChar == 95) {
                                jjCheckNAddStates(369, 371);
                            }
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 70;
                            }
                            break;
                        case 4:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(372, 373);
                            }
                            break;
                        case 8:
                            if (curChar == 123) {
                                jjstateSet[jjnewStateCnt++] = 9;
                            }
                            break;
                        case 9:
                            if ((0x7fffffe07fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(374, 379);
                            break;
                        case 10:
                            if (curChar != 95) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(380, 384);
                            break;
                        case 11:
                            if ((0x7fffffe07fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(380, 384);
                            break;
                        case 14:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(385, 386);
                            }
                            break;
                        case 18:
                            if (curChar == 125 && kind > 13) {
                                kind = 13;
                            }
                            break;
                        case 22:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(387, 388);
                            }
                            break;
                        case 27:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(389, 390);
                            }
                            break;
                        case 31:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(391, 392);
                            }
                            break;
                        case 39:
                            if ((0x7fffffe07fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 13) {
                                kind = 13;
                            }
                            jjCheckNAddStates(393, 402);
                            break;
                        case 42:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(403, 404);
                            }
                            break;
                        case 48:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(405, 406);
                            }
                            break;
                        case 53:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(407, 408);
                            }
                            break;
                        case 57:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(409, 410);
                            }
                            break;
                        case 66:
                            if ((0x800000008000000L & l) != 0L && kind > 21) {
                                kind = 21;
                            }
                            break;
                        case 67:
                            if ((0x2000000020000000L & l) != 0L && kind > 22) {
                                kind = 22;
                            }
                            break;
                        case 68:
                            if ((0x7fffffe07fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAddStates(364, 368);
                            break;
                        case 69:
                            if (curChar == 95) {
                                jjstateSet[jjnewStateCnt++] = 70;
                            }
                            break;
                        case 70:
                            if ((0x7fffffe07fffffeL & l) == 0L) {
                                break;
                            }
                            if (kind > 11) {
                                kind = 11;
                            }
                            jjCheckNAdd(69);
                            break;
                        case 76:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(411, 412);
                            }
                            break;
                        case 81:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(413, 414);
                            }
                            break;
                        case 85:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(415, 416);
                            }
                            break;
                        case 91:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(417, 418);
                            }
                            break;
                        case 96:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(419, 420);
                            }
                            break;
                        case 100:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(421, 422);
                            }
                            break;
                        case 106:
                            if ((0x2000000020L & l) != 0L) {
                                jjAddStates(423, 424);
                            }
                            break;
                        case 111:
                            jjAddStates(0, 2);
                            break;
                        case 116:
                            jjCheckNAddTwoStates(116, 117);
                            break;
                        case 118:
                        case 119:
                            jjCheckNAddTwoStates(119, 117);
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            } else {
                int i2 = (curChar & 0xff) >> 6;
                long l2 = 1L << (curChar & 077);
                do {
                    switch (jjstateSet[--i]) {
                        case 111:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                jjAddStates(0, 2);
                            }
                            break;
                        case 116:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                jjCheckNAddTwoStates(116, 117);
                            }
                            break;
                        case 118:
                        case 119:
                            if ((jjbitVec0[i2] & l2) != 0L) {
                                jjCheckNAddTwoStates(119, 117);
                            }
                            break;
                        default:
                            break;
                    }
                } while (i != startsAt);
            }
            if (kind != 0x7fffffff) {
                jjmatchedKind = kind;
                jjmatchedPos = curPos;
                kind = 0x7fffffff;
            }
            ++curPos;
            if ((i = jjnewStateCnt) == (startsAt = 121 - (jjnewStateCnt = startsAt))) {
                return curPos;
            }
            try {
                curChar = input_stream.readChar();
            } catch (java.io.IOException e) {
                return curPos;
            }
        }
    }

    static final int[] jjnextStates = {
        111, 112, 114, 95, 96, 99, 100, 103, 104, 110, 115, 8, 9, 80, 81, 84,
        85, 88, 89, 11, 12, 14, 17, 18, 38, 11, 12, 17, 18, 37, 11, 12,
        17, 18, 19, 11, 20, 21, 12, 26, 27, 31, 17, 18, 19, 35, 11, 22,
        12, 17, 18, 36, 11, 12, 17, 18, 25, 11, 20, 21, 12, 26, 27, 31,
        17, 18, 35, 25, 11, 12, 17, 18, 30, 11, 20, 21, 12, 26, 27, 31,
        17, 18, 35, 30, 11, 12, 17, 18, 34, 11, 20, 21, 12, 26, 27, 31,
        17, 18, 34, 35, 11, 20, 21, 12, 26, 27, 31, 17, 18, 35, 11, 20,
        21, 22, 12, 26, 27, 31, 17, 18, 35, 36, 11, 20, 21, 12, 26, 27,
        31, 17, 18, 35, 37, 11, 20, 21, 12, 14, 26, 27, 31, 17, 18, 35,
        38, 42, 10, 18, 39, 40, 61, 65, 10, 18, 39, 45, 40, 61, 46, 47,
        52, 53, 57, 10, 11, 20, 21, 12, 26, 27, 31, 17, 18, 35, 39, 40,
        61, 63, 45, 48, 10, 18, 39, 40, 61, 64, 10, 18, 39, 51, 40, 61,
        46, 47, 52, 53, 57, 10, 11, 20, 21, 12, 26, 27, 31, 17, 18, 35,
        39, 40, 61, 63, 51, 10, 18, 39, 56, 40, 61, 46, 47, 52, 53, 57,
        10, 11, 20, 21, 12, 26, 27, 31, 17, 18, 35, 39, 40, 61, 63, 56,
        10, 18, 39, 60, 40, 61, 46, 47, 52, 53, 57, 10, 11, 20, 21, 12,
        26, 27, 31, 17, 18, 35, 39, 40, 61, 60, 63, 10, 11, 12, 17, 18,
        19, 39, 62, 40, 61, 46, 47, 52, 53, 57, 10, 11, 20, 21, 12, 26,
        27, 31, 17, 18, 35, 39, 62, 40, 61, 63, 46, 47, 52, 53, 57, 10,
        11, 20, 21, 12, 26, 27, 31, 17, 18, 35, 39, 40, 61, 63, 46, 47,
        48, 52, 53, 57, 10, 11, 20, 21, 12, 26, 27, 31, 17, 18, 35, 39,
        40, 61, 63, 64, 46, 47, 42, 52, 53, 57, 10, 11, 20, 21, 12, 26,
        27, 31, 17, 18, 35, 39, 40, 61, 63, 65, 118, 120, 69, 71, 72, 74,
        79, 72, 74, 79, 5, 6, 10, 18, 39, 40, 61, 63, 11, 12, 17, 18,
        35, 15, 16, 23, 24, 28, 29, 32, 33, 10, 11, 12, 17, 18, 35, 39,
        40, 61, 63, 43, 44, 49, 50, 54, 55, 58, 59, 77, 78, 82, 83, 86,
        87, 92, 93, 97, 98, 101, 102, 107, 108,
    };
    public static final String[] jjstrLiteralImages = {
        "", null, null, null, null, null, null, null, null, null, null, null, null,
        null, "\160\151", "\52", "\57", "\53", "\55", "\75", "\136", null, null,
        "\163\151\156", "\141\162\143\163\151\156", "\143\157\163", "\141\162\143\143\157\163",
        "\164\141\156", "\141\162\143\164\141\156", "\163\145\143", "\143\163\143", "\143\157\164",
        "\145\170\160", "\163\161\162\164", "\154\156", "\154\147", "\154\157\147",
        "\146\141\143\164", "\141\162\143\143\157\164", "\141\162\143\163\145\143",
        "\141\162\143\143\163\143", "\141\142\163", "\163\151\156\150", "\141\162\143\163\151\156\150",
        "\143\157\163\150", "\141\162\143\143\157\163\150", "\164\141\156\150",
        "\141\162\143\164\141\156\150", "\143\157\164\150", "\141\162\143\143\157\164\150", "\163\145\143\150",
        "\141\162\143\163\145\143\150", "\143\163\143\150", "\141\162\143\143\163\143\150",};
    public static final String[] lexStateNames = {
        "DEFAULT",
    };
    static final long[] jjtoToken = {
        0x3fffffffffe881L,
    };
    static final long[] jjtoSkip = {
        0x7eL,
    };
    protected SimpleCharStream input_stream;
    private final int[] jjrounds = new int[121];
    private final int[] jjstateSet = new int[242];
    protected char curChar;

    public StringMathParserTokenManager(SimpleCharStream stream) {
        if (SimpleCharStream.staticFlag) {
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
        }
        input_stream = stream;
    }

    public StringMathParserTokenManager(SimpleCharStream stream, int lexState) {
        this(stream);
        SwitchTo(lexState);
    }

    public void ReInit(SimpleCharStream stream) {
        jjmatchedPos = jjnewStateCnt = 0;
        curLexState = defaultLexState;
        input_stream = stream;
        ReInitRounds();
    }

    private final void ReInitRounds() {
        int i;
        jjround = 0x80000001;
        for (i = 121; i-- > 0; ) {
            jjrounds[i] = 0x80000000;
        }
    }

    public void ReInit(SimpleCharStream stream, int lexState) {
        ReInit(stream);
        SwitchTo(lexState);
    }

    public void SwitchTo(int lexState) {
        if (lexState >= 1 || lexState < 0) {
            throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.",
                TokenMgrError.INVALID_LEXICAL_STATE);
        } else {
            curLexState = lexState;
        }
    }

    protected Token jjFillToken() {
        Token t = Token.newToken(jjmatchedKind);
        t.kind = jjmatchedKind;
        String im = jjstrLiteralImages[jjmatchedKind];
        t.image = (im == null) ? input_stream.GetImage() : im;
        t.beginLine = input_stream.getBeginLine();
        t.beginColumn = input_stream.getBeginColumn();
        t.endLine = input_stream.getEndLine();
        t.endColumn = input_stream.getEndColumn();
        return t;
    }

    int curLexState = 0;
    int defaultLexState = 0;
    int jjnewStateCnt;
    int jjround;
    int jjmatchedPos;
    int jjmatchedKind;

    public Token getNextToken() {
        int kind;
        Token specialToken = null;
        Token matchedToken;
        int curPos = 0;

        EOFLoop:
        for (; ; ) {
            try {
                curChar = input_stream.BeginToken();
            } catch (java.io.IOException e) {
                jjmatchedKind = 0;
                matchedToken = jjFillToken();
                return matchedToken;
            }

            try {
                input_stream.backup(0);
                while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L) {
                    curChar = input_stream.BeginToken();
                }
            } catch (java.io.IOException e1) {
                continue EOFLoop;
            }
            jjmatchedKind = 0x7fffffff;
            jjmatchedPos = 0;
            curPos = jjMoveStringLiteralDfa0_0();
            if (jjmatchedKind != 0x7fffffff) {
                if (jjmatchedPos + 1 < curPos) {
                    input_stream.backup(curPos - jjmatchedPos - 1);
                }
                if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L) {
                    matchedToken = jjFillToken();
                    return matchedToken;
                } else {
                    continue EOFLoop;
                }
            }
            int error_line = input_stream.getEndLine();
            int error_column = input_stream.getEndColumn();
            String error_after = null;
            boolean EOFSeen = false;
            try {
                input_stream.readChar();
                input_stream.backup(1);
            } catch (java.io.IOException e1) {
                EOFSeen = true;
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
                if (curChar == '\n' || curChar == '\r') {
                    error_line++;
                    error_column = 0;
                } else {
                    error_column++;
                }
            }
            if (!EOFSeen) {
                input_stream.backup(1);
                error_after = curPos <= 1 ? "" : input_stream.GetImage();
            }
            throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar,
                TokenMgrError.LEXICAL_ERROR);
        }
    }

}
