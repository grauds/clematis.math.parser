/* Generated By: webtex.jjt,v 1.6 2005/04/21 13&JJTree&JavaCC: Do not edit this line. WebTexParser.java */
package org.clematis.math.v1.parser.webtex;

import java.io.StringReader;

public class WebTexParser/*@bgen(jjtree)*/
    implements WebTexParserTreeConstants, WebTexParserConstants {/*@bgen(jjtree)*/
    protected JJTWebTexParserState jjtree = new JJTWebTexParserState();

    public static void main(String[] args) {

        //System.out.println("Reading from standard input...");
        //WebTexParser parser = new WebTexParser(System.in);

        //String expr = "\\sin {\\sin ^ {-1} c}";
        String expr = "x+\\frac{x}{2}+\\frac{a_2}{\\gamma^2}";
        WebTexParser parser = new WebTexParser(new StringReader(expr));

        try {
            SimpleNode n = parser.Start();
            n.dump("");
            //System.out.println("Thank you.");
        } catch (Exception e) {
            System.out.println("Oops.");
            System.out.println(e.getMessage());
            e.printStackTrace();
        }
    }

    final public SimpleNode Start() throws ParseException {
        SimpleNode jjtn001 = new SimpleNode(JJTEXPR);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            Expression();
            jj_consume_token(0);
            jjtree.closeNodeScope(jjtn001, true);
            jjtc001 = false;
            {
                if (true) {
                    return jjtn001;
                }
            }
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void Expression() throws ParseException {
        EqualsExpression();
    }

    final public void EqualsExpression() throws ParseException {
        /*@bgen(jjtree) #EQUALS_EXPR(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTEQUALS_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        String image = null;
        Token t;
        try {
            PlusExpression();
            label_1:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case EQUALS:
                        break;
                    default:
                        jj_la1[0] = jj_gen;
                        break label_1;
                }
                t = jj_consume_token(EQUALS);
                image = t.image;
                PlusExpression();
            }
            jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            jjtc000 = false;
            jjtn000.setTokenImage(image);
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            }
        }
    }

    /*
    void NegativeExpr() :
    {
    }
    {
         (<MINUS> PlusExpression() )#UNARY_MINUS  |
         PlusExpression()
    }
    */
    final public void PlusExpression() throws ParseException {
        /*@bgen(jjtree) #PLUS_EXPR(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTPLUS_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            MinusExpression();
            label_2:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case PLUS:
                        break;
                    default:
                        jj_la1[1] = jj_gen;
                        break label_2;
                }
                t = jj_consume_token(PLUS);
                jjtn000.setTokenImage(t.image);
                MinusExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void MinusExpression() throws ParseException {
        /*@bgen(jjtree) #MINUS_EXPR(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTMINUS_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            MultExpression();
            label_3:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case MINUS:
                        break;
                    default:
                        jj_la1[2] = jj_gen;
                        break label_3;
                }
                t = jj_consume_token(MINUS);
                jjtn000.setTokenImage(t.image);
                MultExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void MultExpression() throws ParseException {
        /*@bgen(jjtree) #MULT_EXPR(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTMULT_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t = null;
        try {
            DivExpressionMinus();
            label_4:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case NUMBER:
                    case IDENTIFIER:
                    case PI:
                    case EXP_E:
                    case MULT:
                    case 22:
                    case 24:
                    case 26:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                        break;
                    default:
                        jj_la1[3] = jj_gen;
                        break label_4;
                }
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case MULT:
                        t = jj_consume_token(MULT);
                        jjtn000.setTokenImage(t.image);
                        DivExpressionMinus();
                        break;
                    case NUMBER:
                    case IDENTIFIER:
                    case PI:
                    case EXP_E:
                    case 22:
                    case 24:
                    case 26:
                    case 28:
                    case 29:
                    case 30:
                    case 31:
                    case 32:
                    case 33:
                    case 34:
                    case 35:
                    case 36:
                    case 37:
                    case 38:
                    case 39:
                    case 40:
                    case 41:
                    case 42:
                    case 43:
                        jjtn000.setTokenImage("*");
                        DivExpression();
                        break;
                    default:
                        jj_la1[4] = jj_gen;
                        jj_consume_token(-1);
                        throw new ParseException();
                }
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            }
        }
    }

    //divide expression without unary minus
    final public void DivExpression() throws ParseException {
        /*@bgen(jjtree) #DIV_EXPR(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTDIV_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            PowerExpression();
            label_5:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case DIV:
                        break;
                    default:
                        jj_la1[5] = jj_gen;
                        break label_5;
                }
                t = jj_consume_token(DIV);
                jjtn000.setTokenImage(t.image);
                PowerExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            }
        }
    }

    //divide expression with unary minus
    final public void DivExpressionMinus() throws ParseException {
        /*@bgen(jjtree) #DIV_EXPR(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTDIV_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            NegativeExpr();
            label_6:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case DIV:
                        break;
                    default:
                        jj_la1[6] = jj_gen;
                        break label_6;
                }
                t = jj_consume_token(DIV);
                jjtn000.setTokenImage(t.image);
                NegativeExpr();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void NegativeExpr() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case MINUS:
                SimpleNode jjtn001 = new SimpleNode(JJTUNARY_MINUS);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                try {
                    jj_consume_token(MINUS);
                    PowerExpression();
                } catch (Throwable jjte001) {
                    if (jjtc001) {
                        jjtree.clearNodeScope(jjtn001);
                        jjtc001 = false;
                    } else {
                        jjtree.popNode();
                    }
                    if (jjte001 instanceof RuntimeException) {
                        {
                            if (true) {
                                throw (RuntimeException) jjte001;
                            }
                        }
                    }
                    if (jjte001 instanceof ParseException) {
                        {
                            if (true) {
                                throw (ParseException) jjte001;
                            }
                        }
                    }
                    {
                        if (true) {
                            throw (Error) jjte001;
                        }
                    }
                } finally {
                    if (jjtc001) {
                        jjtree.closeNodeScope(jjtn001, true);
                    }
                }
                break;
            case NUMBER:
            case IDENTIFIER:
            case PI:
            case EXP_E:
            case 22:
            case 24:
            case 26:
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
                PowerExpression();
                break;
            default:
                jj_la1[7] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void PowerExpression() throws ParseException {
        /*@bgen(jjtree) #POWER_EXPR(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTPOWER_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            IndexExpression();
            label_7:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 20:
                        break;
                    default:
                        jj_la1[8] = jj_gen;
                        break label_7;
                }
                jj_consume_token(20);
                IndexExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void IndexExpression() throws ParseException {
        /*@bgen(jjtree) #INDEX_EXPR(> 1) */
        SimpleNode jjtn000 = new SimpleNode(JJTINDEX_EXPR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            UnaryExpression();
            label_8:
            while (true) {
                switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                    case 21:
                        break;
                    default:
                        jj_la1[9] = jj_gen;
                        break label_8;
                }
                jj_consume_token(21);
                UnaryExpression();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
            }
        }
    }

    final public void UnaryExpression() throws ParseException {
        switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
            case 22:
                jj_consume_token(22);
                Expression();
                jj_consume_token(23);
                break;
            case 24:
                jj_consume_token(24);
                Expression();
                jj_consume_token(25);
                break;
            case 26:
                jj_consume_token(26);
                Expression();
                jj_consume_token(27);
                break;
            case IDENTIFIER:
                Variable();
                break;
            case NUMBER:
                Number();
                break;
            case 28:
            case 29:
            case 30:
            case 31:
            case 32:
            case 33:
            case 34:
            case 35:
            case 36:
            case 37:
            case 38:
            case 39:
            case 40:
            case 41:
            case 42:
            case 43:
                Function();
                break;
            case PI:
            case EXP_E:
                Constant();
                break;
            default:
                jj_la1[10] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
        }
    }

    final public void Variable() throws ParseException {
        /*@bgen(jjtree) VAR */
        SimpleNode jjtn000 = new SimpleNode(JJTVAR);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(IDENTIFIER);
            jjtn000.setTokenImage(t.image);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;

        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    final public Token Number() throws ParseException {
        /*@bgen(jjtree) NUMBER */
        SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            t = jj_consume_token(NUMBER);
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setTokenImage(t.image);
            {
                if (true) {
                    return t;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public Token Constant() throws ParseException {
        /*@bgen(jjtree) CONSTANT */
        SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        Token t;
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case EXP_E:
                    t = jj_consume_token(EXP_E);
                    break;
                case PI:
                    t = jj_consume_token(PI);
                    break;
                default:
                    jj_la1[11] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
            jjtree.closeNodeScope(jjtn000, true);
            jjtc000 = false;
            jjtn000.setTokenImage(t.image);
            jjtn000.setTokenKind(t.kind);
            {
                if (true) {
                    return t;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
        throw new Error("Missing return statement in function");
    }

    final public void Function() throws ParseException {
        /*@bgen(jjtree) FUNCTION */
        SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
        boolean jjtc000 = true;
        jjtree.openNodeScope(jjtn000);
        try {
            switch ((jj_ntk == -1) ? jj_ntk() : jj_ntk) {
                case 28:
                    FunctionFrac(jjtn000);
                    break;
                case 29:
                    FunctionSin(jjtn000);
                    break;
                case 30:
                    FunctionASin(jjtn000);
                    break;
                case 31:
                    FunctionCos(jjtn000);
                    break;
                case 32:
                    FunctionACos(jjtn000);
                    break;
                case 33:
                    FunctionTan(jjtn000);
                    break;
                case 34:
                    FunctionATan(jjtn000);
                    break;
                case 35:
                    FunctionSec(jjtn000);
                    break;
                case 36:
                    FunctionCsc(jjtn000);
                    break;
                case 37:
                    FunctionCot(jjtn000);
                    break;
                case 38:
                    FunctionExp(jjtn000);
                    break;
                case 39:
                    FunctionSqrt(jjtn000);
                    break;
                case 40:
                    FunctionRoot(jjtn000);
                    break;
                case 41:
                    FunctionLn(jjtn000);
                    break;
                case 42:
                    FunctionLg(jjtn000);
                    break;
                case 43:
                    FunctionLog(jjtn000);
                    break;
                default:
                    jj_la1[12] = jj_gen;
                    jj_consume_token(-1);
                    throw new ParseException();
            }
        } catch (Throwable jjte000) {
            if (jjtc000) {
                jjtree.clearNodeScope(jjtn000);
                jjtc000 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte000 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte000;
                    }
                }
            }
            if (jjte000 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte000;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte000;
                }
            }
        } finally {
            if (jjtc000) {
                jjtree.closeNodeScope(jjtn000, true);
            }
        }
    }

    //void ArgList() : {}
//{
//    ( Variable() #ARG | Number() #ARG | Function()#ARG | ( "{" Expression() #ARG  "}" )+ )
//
//    //conflict "\fname {x} {y}"  - is it two args function or "\fname {x} * {y}"  ?
//
//}
    final public void FunctionFrac(SimpleNode function) throws ParseException {
        jj_consume_token(28);
        function.setTokenImage("frac");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
        SimpleNode jjtn002 = new SimpleNode(JJTARG);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
            UnaryExpression();
        } catch (Throwable jjte002) {
            if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte002;
                    }
                }
            }
            if (jjte002 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte002;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte002;
                }
            }
        } finally {
            if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
            }
        }
    }

    //Unary function
    final public void FunctionSin(SimpleNode function) throws ParseException {
        jj_consume_token(29);
        function.setTokenImage("sin");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionASin(SimpleNode function) throws ParseException {
        jj_consume_token(30);
        function.setTokenImage("arcsin");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionCos(SimpleNode function) throws ParseException {
        jj_consume_token(31);
        function.setTokenImage("cos");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionACos(SimpleNode function) throws ParseException {
        jj_consume_token(32);
        function.setTokenImage("arccos");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionTan(SimpleNode function) throws ParseException {
        jj_consume_token(33);
        function.setTokenImage("tan");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionATan(SimpleNode function) throws ParseException {
        jj_consume_token(34);
        function.setTokenImage("arctan");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionSec(SimpleNode function) throws ParseException {
        jj_consume_token(35);
        function.setTokenImage("sec");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionCsc(SimpleNode function) throws ParseException {
        jj_consume_token(36);
        function.setTokenImage("csc");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionCot(SimpleNode function) throws ParseException {
        jj_consume_token(37);
        function.setTokenImage("cot");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionExp(SimpleNode function) throws ParseException {
        jj_consume_token(38);
        function.setTokenImage("exp");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionSqrt(SimpleNode function) throws ParseException {
        jj_consume_token(39);
        function.setTokenImage("sqrt");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionRoot(SimpleNode function) throws ParseException {
        jj_consume_token(40);
        function.setTokenImage("root");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
        SimpleNode jjtn002 = new SimpleNode(JJTARG);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
            UnaryExpression();
        } catch (Throwable jjte002) {
            if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte002;
                    }
                }
            }
            if (jjte002 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte002;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte002;
                }
            }
        } finally {
            if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
            }
        }
    }

    final public void FunctionLn(SimpleNode function) throws ParseException {
        jj_consume_token(41);
        function.setTokenImage("ln");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionLg(SimpleNode function) throws ParseException {
        jj_consume_token(42);
        function.setTokenImage("lg");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
    }

    final public void FunctionLog(SimpleNode function) throws ParseException {
        jj_consume_token(43);
        function.setTokenImage("log");
        SimpleNode jjtn001 = new SimpleNode(JJTARG);
        boolean jjtc001 = true;
        jjtree.openNodeScope(jjtn001);
        try {
            UnaryExpression();
        } catch (Throwable jjte001) {
            if (jjtc001) {
                jjtree.clearNodeScope(jjtn001);
                jjtc001 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte001 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte001;
                    }
                }
            }
            if (jjte001 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte001;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte001;
                }
            }
        } finally {
            if (jjtc001) {
                jjtree.closeNodeScope(jjtn001, true);
            }
        }
        SimpleNode jjtn002 = new SimpleNode(JJTARG);
        boolean jjtc002 = true;
        jjtree.openNodeScope(jjtn002);
        try {
            UnaryExpression();
        } catch (Throwable jjte002) {
            if (jjtc002) {
                jjtree.clearNodeScope(jjtn002);
                jjtc002 = false;
            } else {
                jjtree.popNode();
            }
            if (jjte002 instanceof RuntimeException) {
                {
                    if (true) {
                        throw (RuntimeException) jjte002;
                    }
                }
            }
            if (jjte002 instanceof ParseException) {
                {
                    if (true) {
                        throw (ParseException) jjte002;
                    }
                }
            }
            {
                if (true) {
                    throw (Error) jjte002;
                }
            }
        } finally {
            if (jjtc002) {
                jjtree.closeNodeScope(jjtn002, true);
            }
        }
    }

    public WebTexParserTokenManager token_source;
    SimpleCharStream jj_input_stream;
    public Token token, jj_nt;
    private int jj_ntk;
    private int jj_gen;
    final private int[] jj_la1 = new int[13];
    static private int[] jj_la1_0;
    static private int[] jj_la1_1;

    static {
        jj_la1_0();
        jj_la1_1();
    }

    private static void jj_la1_0() {
        jj_la1_0 = new int[]{0x80000, 0x20000, 0x40000, 0xf540e880, 0xf540e880, 0x10000, 0x10000, 0xf5446880, 0x100000,
            0x200000, 0xf5406880, 0x6000, 0xf0000000,};
    }

    private static void jj_la1_1() {
        jj_la1_1 = new int[]{0x0, 0x0, 0x0, 0xfff, 0xfff, 0x0, 0x0, 0xfff, 0x0, 0x0, 0xfff, 0x0, 0xfff,};
    }

    public WebTexParser(java.io.InputStream stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new WebTexParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) {
            jj_la1[i] = -1;
        }
    }

    public void ReInit(java.io.InputStream stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 13; i++) {
            jj_la1[i] = -1;
        }
    }

    public WebTexParser(java.io.Reader stream) {
        jj_input_stream = new SimpleCharStream(stream, 1, 1);
        token_source = new WebTexParserTokenManager(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) {
            jj_la1[i] = -1;
        }
    }

    public void ReInit(java.io.Reader stream) {
        jj_input_stream.ReInit(stream, 1, 1);
        token_source.ReInit(jj_input_stream);
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 13; i++) {
            jj_la1[i] = -1;
        }
    }

    public WebTexParser(WebTexParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jj_gen = 0;
        for (int i = 0; i < 13; i++) {
            jj_la1[i] = -1;
        }
    }

    public void ReInit(WebTexParserTokenManager tm) {
        token_source = tm;
        token = new Token();
        jj_ntk = -1;
        jjtree.reset();
        jj_gen = 0;
        for (int i = 0; i < 13; i++) {
            jj_la1[i] = -1;
        }
    }

    final private Token jj_consume_token(int kind) throws ParseException {
        Token oldToken;
        if ((oldToken = token).next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        if (token.kind == kind) {
            jj_gen++;
            return token;
        }
        token = oldToken;
        jj_kind = kind;
        throw generateParseException();
    }

    final public Token getNextToken() {
        if (token.next != null) {
            token = token.next;
        } else {
            token = token.next = token_source.getNextToken();
        }
        jj_ntk = -1;
        jj_gen++;
        return token;
    }

    final public Token getToken(int index) {
        Token t = token;
        for (int i = 0; i < index; i++) {
            if (t.next != null) {
                t = t.next;
            } else {
                t = t.next = token_source.getNextToken();
            }
        }
        return t;
    }

    final private int jj_ntk() {
        if ((jj_nt = token.next) == null) {
            return (jj_ntk = (token.next = token_source.getNextToken()).kind);
        } else {
            return (jj_ntk = jj_nt.kind);
        }
    }

    private final java.util.Vector jj_expentries = new java.util.Vector();
    private int[] jj_expentry;
    private int jj_kind = -1;

    public ParseException generateParseException() {
        jj_expentries.removeAllElements();
        boolean[] la1tokens = new boolean[44];
        for (int i = 0; i < 44; i++) {
            la1tokens[i] = false;
        }
        if (jj_kind >= 0) {
            la1tokens[jj_kind] = true;
            jj_kind = -1;
        }
        for (int i = 0; i < 13; i++) {
            if (jj_la1[i] == jj_gen) {
                for (int j = 0; j < 32; j++) {
                    if ((jj_la1_0[i] & (1 << j)) != 0) {
                        la1tokens[j] = true;
                    }
                    if ((jj_la1_1[i] & (1 << j)) != 0) {
                        la1tokens[32 + j] = true;
                    }
                }
            }
        }
        for (int i = 0; i < 44; i++) {
            if (la1tokens[i]) {
                jj_expentry = new int[1];
                jj_expentry[0] = i;
                jj_expentries.addElement(jj_expentry);
            }
        }
        int[][] exptokseq = new int[jj_expentries.size()][];
        for (int i = 0; i < jj_expentries.size(); i++) {
            exptokseq[i] = (int[]) jj_expentries.elementAt(i);
        }
        return new ParseException(token, exptokseq, tokenImage);
    }

    final public void enable_tracing() {
    }

    final public void disable_tracing() {
    }

}
