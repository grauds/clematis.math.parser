/* Generated By:JJTree: Do not edit this line. Node.java */

package org.clematis.math.v2.parsers;

import org.clematis.math.v2.AlgorithmException;
import org.clematis.math.v2.algorithm.IParameterProvider;
import org.jdom2.Element;
import org.jdom2.Namespace;

/* All AST nodes must implement this interface.  It provides basic
   machinery for constructing the parent and child relationships
   between nodes. */

public interface Node {
    /**
     * URI for the MATH XML namspace.
     */
    String NS_MATH_URI = "http://www.w3.org/1998/Math/MathML";
    /**
     * UNI XML namespace.
     */
    Namespace NS_MATH = Namespace.getNamespace("math", NS_MATH_URI);

    /**
     * This method is called after the node has been made the current
     * node.  It indicates that child nodes can now be added to it.
     */
    void jjtOpen();

    /**
     * This method is called after all the child nodes have been
     * added.
     */
    void jjtClose();

    /**
     * This pair of methods are used to inform the node of its
     * parent.
     */
    void jjtSetParent(Node n);

    /**
     * Returns the parent of current node
     *
     * @return the parent of current node
     */
    Node jjtGetParent();

    /**
     * This method tells the node to add its argument to the node's
     * list of children.
     */
    void jjtAddChild(Node n, int i);

    /**
     * This method returns a child node.  The children are numbered
     * from zero, left to right.
     */
    Node jjtGetChild(int i);

    /**
     * Return the number of children of the node.
     */
    int jjtGetNumChildren();

    /**
     * Return children of the node.
     *
     * @return children of the node.
     */
    Node[] getChildren();

    /**
     * Calculate the value of this node. It calls calculate() on every child and then makes
     * operation which this node was created for. If no operation is defined, method returns
     * the calculated first argument. Takes the values for parameters from parameter provider, if
     * they are exist.
     *
     * @param parameterProvider with precalculated values for some parameters
     * @return the calculated first argument or result of operation
     * @throws AlgorithmException is thrown if some error occurs while calculating or null result is yeilded.
     */
    Node calculate(IParameterProvider parameterProvider) throws AlgorithmException;

    /**
     * Calculate the value of this node. It calls calculate() on every child and then makes
     * operation which this node was created for. If no operation is defined, method returns
     * the calculated first argument. Takes the values for parameters from parameter provider, if
     * they are exist.

     * @return the calculated first argument or result of operation
     * @throws AlgorithmException is thrown if some error occurs while calculating or null result is yeilded.
     */
    Node calculate() throws AlgorithmException;

    /**
     * Simplification aid. This node should be able to add another node to itself.
     *
     * @param item to add to this node
     * @return a result of addition, the Node representing either constant values or addition operation.
     * @throws AlgorithmException is thrown if some error occurs while calculating or null result is yielded.
     */
    Node add(Node item) throws AlgorithmException;

    /**
     * Simplification aid. This node should be able to multiply another node by itself.
     *
     * @param item to multiply this node with
     * @return a result of multiplication, the Node representing either constant values or multiplication
     * operation.
     * @throws AlgorithmException is thrown if some error occurs while calculating or null result is yielded.
     */
    Node multiply(Node item) throws AlgorithmException;

    /**
     * Simplification aid. Returns true, if given node is in some relationship with this node. For example,
     * it is also addition or multiplication, but with a different set of arguments. For more information
     * about similar items consult documentation.
     *
     * @param item to check similarity of
     * @return true if given node is in some relationship with this node
     */
    boolean isSimilar(Node item);

    /**
     * Simplification aid. Returns true, if given node equals this node. For example,
     * it is also addition or multiplication, but with a disordered set of arguments. For more information
     * about similar items consult documentation.
     *
     * @param item to check similarity of
     * @return true if given node equals this node
     */
    boolean equals(Node item);

    /**
     * Dump this node along with its children to mathml
     *
     * @return mathml for this node along with its children
     */
    Element toMathML();

    /**
     * Dump this node along with its children to text tree to standard output stream
     */
    void dump(String prefix);
}
