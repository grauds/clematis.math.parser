/* Generated By:JJTree: Do not edit this line. SimpleNode.java */
package org.clematis.math.parsers.string;


/**
 * Node class derived from stub, generated by JavaCC. This is a basic node for maths
 * expression tree. It holds reference to parent and children nodes.
 */
public class SimpleNode implements Node {
    /**
     * Parent node, it is also a calculable expression item
     */
    protected Node parent = null;
    /**
     * Node's children, it is also calculable expression items
     */
    protected Node[] children = null;
    /**
     * Name of this node from javacc token
     */
    protected String token = null;
    /**
     * Modifier for this node
     */
    protected int kind = -1;
    /**
     * Ident from parser grammar
     */
    protected int id = 0;

    /**
     * Empty public constructor
     */
    public SimpleNode() {
    }

    /**
     * Constructor with ident, used by javacc parser
     *
     * @param i ident, used by javacc parser
     */
    public SimpleNode(int i) {
        id = i;
    }

    /**
     * Shallow copy constructor. This does not copy parent and children nodes.
     *
     * @param node to copy
     */
    public SimpleNode(SimpleNode node) {
        this.id = node.id;
        this.kind = node.kind;
        this.token = node.token;
    }

    public String getTokenName() {
        return token != null ? token : "";
    }

    public void setTokenName(String tokenName) {
        token = tokenName;
    }

    public int getTokenKind() {
        return kind;
    }

    public void setTokenKind(int kind) {
        this.kind = kind;
    }

    public int getId() {
        return id;
    }

    public static Node jjtCreate(Object parser, int id) {
        return new SimpleNode(id);
    }

    public void jjtOpen() {
        // does nothing for now
    }

    public void jjtClose() {
        // does nothing for now
    }

    public void jjtSetParent(Node n) {
        parent = n;
    }

    public Node jjtGetParent() {
        return parent;
    }

    public Node[] getChildren() {
        return children;
    }

    public void jjtAddChild(Node n, int i) {
        if (getChildren() == null) {
            children = new Node[i + 1];
        } else if (i >= getChildren().length) {
            Node[] c = new Node[i + 1];
            System.arraycopy(getChildren(), 0, c, 0, getChildren().length);
            children = c;
        }
        getChildren()[i] = n;
    }

    public Node jjtGetChild(int i) {
        return getChildren()[i];
    }

    public int jjtGetNumChildren() {
        return (getChildren() == null) ? 0 : getChildren().length;
    }

    public String toString() {
        return getTokenName();
    }

    public String toString(String prefix) {
        return prefix + getClass() + " : " + this;
    }

    /**
     * Dump this node along with its children to text tree to standard output stream
     */
    @SuppressWarnings("checkstyle:Regexp")
    public void dump(String prefix) {
        System.out.println(toString(prefix));
        if (getChildren() != null) {
            for (int i = 0; i < getChildren().length; ++i) {
                Node n = getChildren()[i];
                if (n != null) {
                    n.dump(prefix + " ");
                }
            }
        }
    }

}

