/* Generated By: webtex.jjt,v 1.6 2005/04/21 13&JJTree&JavaCC: Do not edit this line. WebTexParserTokenManager.java */
package org.clematis.math.reference.parser.webtex;

public class WebTexParserTokenManager implements WebTexParserConstants
{
  public  java.io.PrintStream debugStream = System.out;
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffff0002000L) != 0L)
            return 42;
         return -1;
      case 1:
         if ((active0 & 0x8820000000L) != 0L)
            return 117;
         if ((active0 & 0x2000L) != 0L)
            return 127;
         if ((active0 & 0x200000000L) != 0L)
            return 77;
         if ((active0 & 0x540000000L) != 0L)
            return 41;
         if ((active0 & 0xe0000000000L) != 0L)
            return 96;
         if ((active0 & 0x3080000000L) != 0L)
            return 134;
         if ((active0 & 0x10000000000L) != 0L)
            return 108;
         if ((active0 & 0x4000000000L) != 0L)
            return 59;
         return -1;
      case 2:
         if ((active0 & 0x20000000L) != 0L)
            return 116;
         if ((active0 & 0x200000000L) != 0L)
            return 98;
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private final int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private final int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
private final int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 40:
         return jjStopAtPos(0, 22);
      case 41:
         return jjStopAtPos(0, 23);
      case 43:
         return jjStopAtPos(0, 17);
      case 45:
         return jjStopAtPos(0, 18);
      case 61:
         return jjStopAtPos(0, 19);
      case 91:
         return jjStopAtPos(0, 26);
      case 92:
         return jjMoveStringLiteralDfa1_0(0xffff0002000L);
      case 93:
         return jjStopAtPos(0, 27);
      case 94:
         return jjStopAtPos(0, 20);
      case 95:
         return jjStopAtPos(0, 21);
      case 101:
         return jjStopAtPos(0, 14);
      case 123:
         return jjStopAtPos(0, 24);
      case 125:
         return jjStopAtPos(0, 25);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private final int jjMoveStringLiteralDfa1_0(long active0)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x540000000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x3080000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000000L);
      case 102:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0xe0000000000L);
      case 112:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x10000000000L);
      case 115:
         return jjMoveStringLiteralDfa2_0(active0, 0x8820000000L);
      case 116:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private final int jjMoveStringLiteralDfa2_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x200000000L);
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000L);
      case 103:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStopAtPos(2, 42);
         break;
      case 105:
         if ((active0 & 0x2000L) != 0L)
            return jjStopAtPos(2, 13);
         return jjMoveStringLiteralDfa3_0(active0, 0x20000000L);
      case 110:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStopAtPos(2, 41);
         break;
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x92080000000L);
      case 113:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 114:
         return jjMoveStringLiteralDfa3_0(active0, 0x550000000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 120:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private final int jjMoveStringLiteralDfa3_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000L);
      case 99:
         if ((active0 & 0x800000000L) != 0L)
            return jjStopAtPos(3, 35);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStopAtPos(3, 36);
         return jjMoveStringLiteralDfa4_0(active0, 0x540000000L);
      case 103:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStopAtPos(3, 43);
         break;
      case 110:
         if ((active0 & 0x20000000L) != 0L)
            return jjStopAtPos(3, 29);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStopAtPos(3, 33);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x10000000000L);
      case 112:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStopAtPos(3, 38);
         break;
      case 114:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000000L);
      case 115:
         if ((active0 & 0x80000000L) != 0L)
            return jjStopAtPos(3, 31);
         break;
      case 116:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStopAtPos(3, 37);
         break;
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private final int jjMoveStringLiteralDfa4_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 99:
         if ((active0 & 0x10000000L) != 0L)
            return jjStopAtPos(4, 28);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000L);
      case 115:
         return jjMoveStringLiteralDfa5_0(active0, 0x40000000L);
      case 116:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStopAtPos(4, 39);
         else if ((active0 & 0x10000000000L) != 0L)
            return jjStopAtPos(4, 40);
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private final int jjMoveStringLiteralDfa5_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x400000000L);
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x40000000L);
      case 111:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000000L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private final int jjMoveStringLiteralDfa6_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0); 
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x40000000L) != 0L)
            return jjStopAtPos(6, 30);
         else if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(6, 34);
         break;
      case 115:
         if ((active0 & 0x100000000L) != 0L)
            return jjStopAtPos(6, 32);
         break;
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private final void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private final void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private final void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}
private final void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}
private final void jjCheckNAddStates(int start)
{
   jjCheckNAdd(jjnextStates[start]);
   jjCheckNAdd(jjnextStates[start + 1]);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private final int jjMoveNfa_0(int startState, int curPos)
{
   int[] nextStates;
   int startsAt = 0;
   jjnewStateCnt = 191;
   int i = 1;
   jjstateSet[0] = startState;
   int j, kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAddStates(0, 5);
                  }
                  else if (curChar == 47)
                     jjAddStates(6, 7);
                  else if (curChar == 42)
                  {
                     if (kind > 15)
                        kind = 15;
                  }
                  else if (curChar == 46)
                     jjCheckNAdd(3);
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 7)
                        kind = 7;
                     jjCheckNAdd(1);
                  }
                  else if (curChar == 47)
                  {
                     if (kind > 16)
                        kind = 16;
                  }
                  break;
               case 1:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(1);
                  break;
               case 2:
                  if (curChar == 46)
                     jjCheckNAdd(3);
                  break;
               case 3:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(3, 4);
                  break;
               case 5:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(6);
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(6);
                  break;
               case 8:
                  if (curChar == 42 && kind > 15)
                     kind = 15;
                  break;
               case 9:
                  if (curChar == 47 && kind > 16)
                     kind = 16;
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddStates(0, 5);
                  break;
               case 11:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(11, 12);
                  break;
               case 13:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(15, 16);
                  break;
               case 17:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(18);
                  break;
               case 18:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(18);
                  break;
               case 19:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(19, 20);
                  break;
               case 20:
                  if (curChar != 46)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 21:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAddTwoStates(21, 22);
                  break;
               case 23:
                  if ((0x280000000000L & l) != 0L)
                     jjCheckNAdd(24);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 7)
                     kind = 7;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 47)
                     jjAddStates(6, 7);
                  break;
               case 26:
                  if (curChar == 47)
                     jjCheckNAddStates(8, 10);
                  break;
               case 27:
                  if ((0xffffffffffffdbffL & l) != 0L)
                     jjCheckNAddStates(8, 10);
                  break;
               case 28:
                  if ((0x2400L & l) != 0L && kind > 5)
                     kind = 5;
                  break;
               case 29:
                  if (curChar == 10 && kind > 5)
                     kind = 5;
                  break;
               case 30:
                  if (curChar == 13)
                     jjstateSet[jjnewStateCnt++] = 29;
                  break;
               case 31:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 32:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 33:
                  if (curChar == 42)
                     jjAddStates(11, 12);
                  break;
               case 34:
                  if ((0xffff7fffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(35, 33);
                  break;
               case 35:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(35, 33);
                  break;
               case 36:
                  if (curChar == 47 && kind > 6)
                     kind = 6;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 127:
                  if (curChar == 115)
                     jjCheckNAdd(101);
                  else if (curChar == 104)
                     jjCheckNAdd(101);
                  break;
               case 0:
                  if ((0x7ffffde07fffffeL & l) != 0L)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if (curChar == 92)
                     jjCheckNAddStates(13, 54);
                  break;
               case 77:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 181;
                  else if (curChar == 97)
                     jjCheckNAdd(98);
                  else if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 76;
                  break;
               case 59:
                  if (curChar == 116)
                     jjCheckNAdd(38);
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 58;
                  break;
               case 42:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 189;
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 186;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 182;
                  else if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 177;
                  else if (curChar == 88)
                     jjCheckNAdd(101);
                  else if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 170;
                  else if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 166;
                  else if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 162;
                  else if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 157;
                  else if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 153;
                  else if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 148;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 144;
                  else if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 140;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 136;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 132;
                  else if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 125;
                  else if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 117;
                  else if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 108;
                  else if (curChar == 120)
                     jjCheckNAdd(101);
                  else if (curChar == 110)
                     jjCheckNAdd(98);
                  else if (curChar == 109)
                     jjCheckNAdd(98);
                  else if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 96;
                  else if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 91;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 73;
                  else if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 71;
                  else if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 48;
                  else if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 44;
                  else if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 41;
                  if (curChar == 80)
                     jjCheckNAdd(101);
                  else if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 134;
                  else if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 127;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 119;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 113;
                  else if (curChar == 111)
                  {
                     if (kind > 11)
                        kind = 11;
                  }
                  else if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  else if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 52;
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 159;
                  else if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 106;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 77;
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 84;
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 134:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 185;
                  else if (curChar == 104)
                     jjCheckNAdd(101);
                  break;
               case 4:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(55, 56);
                  break;
               case 7:
                  if ((0x7ffffde07fffffeL & l) != 0L && kind > 11)
                     kind = 11;
                  break;
               case 12:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(57, 58);
                  break;
               case 16:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(59, 60);
                  break;
               case 22:
                  if ((0x2000000020L & l) != 0L)
                     jjAddStates(61, 62);
                  break;
               case 27:
                  jjAddStates(8, 10);
                  break;
               case 32:
                  jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
               case 35:
                  jjCheckNAddTwoStates(35, 33);
                  break;
               case 37:
                  if (curChar == 92)
                     jjCheckNAddStates(13, 54);
                  break;
               case 38:
                  if (curChar == 97 && kind > 11)
                     kind = 11;
                  break;
               case 39:
                  if (curChar == 104)
                     jjCheckNAdd(38);
                  break;
               case 40:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 43:
               case 50:
               case 70:
               case 75:
               case 79:
               case 86:
               case 142:
               case 168:
                  if (curChar == 116)
                     jjCheckNAdd(38);
                  break;
               case 44:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 43;
                  break;
               case 45:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
               case 115:
               case 146:
               case 164:
                  if (curChar == 109)
                     jjCheckNAdd(38);
                  break;
               case 47:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 47;
                  break;
               case 49:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 51:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 50;
                  break;
               case 52:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 110 && kind > 11)
                     kind = 11;
                  break;
               case 55:
               case 61:
               case 121:
               case 173:
                  if (curChar == 111)
                     jjCheckNAdd(54);
                  break;
               case 56:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 56;
                  break;
               case 58:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 57;
                  break;
               case 60:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 59;
                  break;
               case 62:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 61;
                  break;
               case 63:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 62;
                  break;
               case 64:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 66;
                  break;
               case 68:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 68;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 122)
                     jjstateSet[jjnewStateCnt++] = 71;
                  break;
               case 73:
                  if (curChar == 116)
                     jjCheckNAdd(38);
                  break;
               case 74:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 76:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 75;
                  break;
               case 78:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 80:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 82:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 83:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 82;
                  break;
               case 84:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 87:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 88:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 112)
                     jjCheckNAdd(38);
                  break;
               case 90:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 89;
                  break;
               case 91:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 107)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
               case 150:
                  if (curChar == 100)
                     jjCheckNAdd(38);
                  break;
               case 94:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 95;
                  break;
               case 97:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 117 && kind > 11)
                     kind = 11;
                  break;
               case 99:
                  if (curChar == 109)
                     jjCheckNAdd(98);
                  break;
               case 100:
                  if (curChar == 110)
                     jjCheckNAdd(98);
                  break;
               case 101:
                  if (curChar == 105 && kind > 11)
                     kind = 11;
                  break;
               case 102:
                  if (curChar == 120)
                     jjCheckNAdd(101);
                  break;
               case 103:
                  if (curChar == 111 && kind > 11)
                     kind = 11;
                  break;
               case 104:
                  if (curChar == 112)
                     jjCheckNAdd(101);
                  break;
               case 105:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 104;
                  break;
               case 106:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 105;
                  break;
               case 107:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 106;
                  break;
               case 108:
               case 110:
                  if (curChar == 104)
                     jjCheckNAdd(103);
                  break;
               case 109:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 108;
                  break;
               case 111:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 110;
                  break;
               case 112:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 111;
                  break;
               case 113:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 112;
                  break;
               case 114:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 113;
                  break;
               case 116:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 115;
                  break;
               case 117:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 116;
                  break;
               case 118:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 117;
                  break;
               case 119:
                  if (curChar == 97)
                     jjCheckNAdd(98);
                  break;
               case 120:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 119;
                  break;
               case 122:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 121;
                  break;
               case 123:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 122;
                  break;
               case 124:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 123;
                  break;
               case 125:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 124;
                  break;
               case 126:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 125;
                  break;
               case 128:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 127;
                  break;
               case 129:
               case 159:
                  if (curChar == 104)
                     jjCheckNAdd(101);
                  break;
               case 130:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 129;
                  break;
               case 131:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 130;
                  break;
               case 132:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 131;
                  break;
               case 133:
                  if (curChar == 118)
                     jjstateSet[jjnewStateCnt++] = 132;
                  break;
               case 135:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 134;
                  break;
               case 136:
               case 162:
                  if (curChar == 115)
                     jjCheckNAdd(101);
                  break;
               case 137:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 136;
                  break;
               case 138:
               case 155:
                  if (curChar == 103)
                     jjCheckNAdd(38);
                  break;
               case 139:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 138;
                  break;
               case 140:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 139;
                  break;
               case 141:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 140;
                  break;
               case 143:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 142;
                  break;
               case 144:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 143;
                  break;
               case 145:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 144;
                  break;
               case 147:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 146;
                  break;
               case 148:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 147;
                  break;
               case 149:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 148;
                  break;
               case 151:
                  if (curChar == 98)
                     jjstateSet[jjnewStateCnt++] = 150;
                  break;
               case 152:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 151;
                  break;
               case 153:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 152;
                  break;
               case 154:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 153;
                  break;
               case 156:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 155;
                  break;
               case 157:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 156;
                  break;
               case 158:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 157;
                  break;
               case 160:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 159;
                  break;
               case 161:
                  if (curChar == 80)
                     jjCheckNAdd(101);
                  break;
               case 163:
                  if (curChar == 80)
                     jjstateSet[jjnewStateCnt++] = 162;
                  break;
               case 165:
                  if (curChar == 103)
                     jjstateSet[jjnewStateCnt++] = 164;
                  break;
               case 166:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 165;
                  break;
               case 167:
                  if (curChar == 83)
                     jjstateSet[jjnewStateCnt++] = 166;
                  break;
               case 169:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 168;
                  break;
               case 170:
                  if (curChar == 104)
                     jjstateSet[jjnewStateCnt++] = 169;
                  break;
               case 171:
                  if (curChar == 84)
                     jjstateSet[jjnewStateCnt++] = 170;
                  break;
               case 172:
                  if (curChar == 88)
                     jjCheckNAdd(101);
                  break;
               case 174:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 173;
                  break;
               case 175:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 174;
                  break;
               case 176:
                  if (curChar == 115)
                     jjstateSet[jjnewStateCnt++] = 175;
                  break;
               case 177:
                  if (curChar == 112)
                     jjstateSet[jjnewStateCnt++] = 176;
                  break;
               case 178:
                  if (curChar == 85)
                     jjstateSet[jjnewStateCnt++] = 177;
                  break;
               case 179:
                  if (curChar == 115 && kind > 15)
                     kind = 15;
                  break;
               case 180:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 179;
                  break;
               case 181:
                  if (curChar == 109)
                     jjstateSet[jjnewStateCnt++] = 180;
                  break;
               case 182:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 181;
                  break;
               case 183:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 182;
                  break;
               case 184:
                  if (curChar == 116 && kind > 15)
                     kind = 15;
                  break;
               case 185:
                  if (curChar == 111)
                     jjstateSet[jjnewStateCnt++] = 184;
                  break;
               case 186:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 185;
                  break;
               case 187:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 186;
                  break;
               case 188:
                  if (curChar == 118 && kind > 16)
                     kind = 16;
                  break;
               case 189:
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 188;
                  break;
               case 190:
                  if (curChar == 100)
                     jjstateSet[jjnewStateCnt++] = 189;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         MatchLoop: do
         {
            switch(jjstateSet[--i])
            {
               case 27:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjAddStates(8, 10);
                  break;
               case 32:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(32, 33);
                  break;
               case 34:
               case 35:
                  if ((jjbitVec0[i2] & l2) != 0L)
                     jjCheckNAddTwoStates(35, 33);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 191 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   11, 12, 15, 16, 19, 20, 26, 31, 27, 28, 30, 34, 36, 42, 45, 49, 
   53, 60, 69, 72, 74, 78, 85, 88, 92, 97, 99, 100, 102, 103, 107, 109, 
   114, 118, 120, 126, 128, 133, 135, 137, 141, 145, 149, 154, 158, 160, 161, 163, 
   167, 171, 172, 178, 183, 187, 190, 5, 6, 13, 14, 17, 18, 23, 24, 
};
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, null, null, null, null, null, 
"\134\160\151", "\145", null, null, "\53", "\55", "\75", "\136", "\137", "\50", "\51", "\173", 
"\175", "\133", "\135", "\134\146\162\141\143", "\134\163\151\156", 
"\134\141\162\143\163\151\156", "\134\143\157\163", "\134\141\162\143\143\157\163", "\134\164\141\156", 
"\134\141\162\143\164\141\156", "\134\163\145\143", "\134\143\163\143", "\134\143\157\164", 
"\134\145\170\160", "\134\163\161\162\164", "\134\162\157\157\164", "\134\154\156", 
"\134\154\147", "\134\154\157\147", };
public static final String[] lexStateNames = {
   "DEFAULT", 
};
static final long[] jjtoToken = {
   0xfffffffe881L, 
};
static final long[] jjtoSkip = {
   0x7eL, 
};
protected SimpleCharStream input_stream;
private final int[] jjrounds = new int[191];
private final int[] jjstateSet = new int[382];
protected char curChar;
public WebTexParserTokenManager(SimpleCharStream stream)
{
   if (SimpleCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}
public WebTexParserTokenManager(SimpleCharStream stream, int lexState)
{
   this(stream);
   SwitchTo(lexState);
}
public void ReInit(SimpleCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private final void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 191; i-- > 0;)
      jjrounds[i] = 0x80000000;
}
public void ReInit(SimpleCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   Token t = Token.newToken(jjmatchedKind);
   t.kind = jjmatchedKind;
   String im = jjstrLiteralImages[jjmatchedKind];
   t.image = (im == null) ? input_stream.GetImage() : im;
   t.beginLine = input_stream.getBeginLine();
   t.beginColumn = input_stream.getBeginColumn();
   t.endLine = input_stream.getEndLine();
   t.endColumn = input_stream.getEndColumn();
   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

public Token getNextToken() 
{
  int kind;
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {   
   try   
   {     
      curChar = input_stream.BeginToken();
   }     
   catch(java.io.IOException e)
   {        
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100002600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         return matchedToken;
      }
      else
      {
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

}
