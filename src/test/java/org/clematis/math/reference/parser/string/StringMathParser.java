/* Generated By:JJTree&JavaCC: Do not edit this line. StringMathParser.java */
package org.clematis.math.reference.parser.string;

import java.io.StringReader;

public class StringMathParser/*@bgen(jjtree)*/implements StringMathParserTreeConstants, StringMathParserConstants {/*@bgen(jjtree)*/
  protected JJTStringMathParserState jjtree = new JJTStringMathParserState();public static String parse(String expr)
  {
    StringMathParser parser = new StringMathParser(new StringReader(expr));

    try
    {
      SimpleNode n = parser.Start();
      StringBuilder sb = new StringBuilder();
      WebTexPrinter.print(n, sb);
      return sb.toString();
    }
    catch (Exception e)
    {
       e.printStackTrace();
    }

    return null;
  }

  public static void main(String args[])
  {
    //System.out.println("Reading from standard input...");
    //StringMathParser parser = new StringMathParser(System.in);

    //String expr = "sin(3)";
    //String expr = "x+(sin(${x}/2)+a_2/9 * x ^ 3)";
    //String expr = "$b3*(x$x0_rsgn$x0_abs)*(x$x1_rsgn$x1_abs)*(x$x2_rsgn$x2_abs)" +
     //       "+$b2*(x$x0_rsgn$x0_abs)*(x$x1_rsgn$x1_abs)+$b1*(x$x0_rsgn$x0_abs)+$b0+sin(x)";
   // String expr = "-ln($a)*pi/(x*(ln(x)^2)) + (1 - 8 )";
    //String expr = "-ln(((($a+1)*($k-9))))*pi/(x*(ln(x)^2))-(x-y)";
    //String expr = "-ln($a+cos($k*x))/$k + sinx";
    String expr = "1/(2*(x+1)^(0.5))";
    StringMathParser parser = new StringMathParser(new StringReader(expr));

    try
    {
      SimpleNode n = parser.Start();
      n.dump(" ");
      System.out.println( expr );
      StringBuilder sb = new StringBuilder();
      WebTexPrinter.print(n, sb);
      System.out.println("------------");
      System.out.println(sb.toString());
    }
    catch (Exception e)
    {
       e.printStackTrace();
    }
  }

  final public SimpleNode Start() throws ParseException {
    SimpleNode jjtn001 = new SimpleNode(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      Expression();
      jj_consume_token(0);
       jjtree.closeNodeScope(jjtn001, true);
       jjtc001 = false;
       {if (true) return jjtn001;}
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Expression() throws ParseException {
 /*@bgen(jjtree) #EXPR(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      PlusExpression();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case EQUALS:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        t = jj_consume_token(EQUALS);
                                        jjtn000.setTokenName(t.image);
        PlusExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

/*void NegativeExpr() :
{
}
{
  (
      <MINUS> PlusExpression()
  )
  #UNARY_MINUS  |  PlusExpression()
}*/
  final public void PlusExpression() throws ParseException {
 /*@bgen(jjtree) #PLUS_EXPR(> 1) */
   SimpleNode jjtn000 = new SimpleNode(JJTPLUS_EXPR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t;
    try {
      MinusExpression();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PLUS:
          ;
          break;
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        t = jj_consume_token(PLUS);
                                         jjtn000.setTokenName(t.image);
        MinusExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void MinusExpression() throws ParseException {
 /*@bgen(jjtree) #MINUS_EXPR(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      MultExpression();
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MINUS:
          ;
          break;
        default:
          jj_la1[2] = jj_gen;
          break label_3;
        }
        t = jj_consume_token(MINUS);
                                         jjtn000.setTokenName(t.image);
        MultExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void MultExpression() throws ParseException {
 /*@bgen(jjtree) #MULT_EXPR(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTMULT_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);Token t;
    try {
      DivExpression();
      label_4:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case MULT:
          ;
          break;
        default:
          jj_la1[3] = jj_gen;
          break label_4;
        }
        t = jj_consume_token(MULT);
                                   jjtn000.setTokenName(t.image);
        DivExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void DivExpression() throws ParseException {
 /*@bgen(jjtree) #DIV_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTDIV_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      NegativeExpr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case DIV:
          ;
          break;
        default:
          jj_la1[4] = jj_gen;
          break label_5;
        }
        t = jj_consume_token(DIV);
                                   jjtn000.setTokenName(t.image);
        NegativeExpr();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void NegativeExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
       SimpleNode jjtn001 = new SimpleNode(JJTUNARY_MINUS);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
      try {
        jj_consume_token(MINUS);
        PowerExpression();
      } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         {if (true) throw (RuntimeException)jjte001;}
       }
       if (jjte001 instanceof ParseException) {
         {if (true) throw (ParseException)jjte001;}
       }
       {if (true) throw (Error)jjte001;}
      } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
      }
      break;
    case NUMBER:
    case IDENTIFIER:
    case VARIABLE:
    case PI:
    case OPEN_BR:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
    case 46:
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
      PowerExpression();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void PowerExpression() throws ParseException {
 /*@bgen(jjtree) #POWER_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTPOWER_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      UnaryExpression();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case POWER:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        t = jj_consume_token(POWER);
                                       jjtn000.setTokenName(t.image);
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
    }
  }

  final public void UnaryExpression() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OPEN_BR:
      BrExpression();
      break;
    case VARIABLE:
      Variable();
      break;
    case NUMBER:
      Number();
      break;
    case IDENTIFIER:
      Identifier();
      break;
    default:
      jj_la1[7] = jj_gen;
      if (jj_2_1(2)) {
        Function();
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case PI:
          PI();
          break;
        default:
          jj_la1[8] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  final public void BrExpression() throws ParseException {
 /*@bgen(jjtree) BR_EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTBR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      OpenBr();
      Expression();
      CloseBr();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public Token Variable() throws ParseException {
 /*@bgen(jjtree) VAR */
    SimpleNode jjtn000 = new SimpleNode(JJTVAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(VARIABLE);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setTokenName(t.image);
    {if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token Number() throws ParseException {
 /*@bgen(jjtree) NUMBER */
    SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(NUMBER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setTokenName(t.image);
    {if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token Identifier() throws ParseException {
 /*@bgen(jjtree) IDENTIFIER */
    SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtn000.setTokenName(t.image);
    {if (true) return t;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token PI() throws ParseException {
 /*@bgen(jjtree) PI */
   SimpleNode jjtn000 = new SimpleNode(JJTPI);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(PI);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
     jjtn000.setTokenName("\\" + t.image);
     {if (true) return t;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token OpenBr() throws ParseException {
 /*@bgen(jjtree) OPEN_BR */
   SimpleNode jjtn000 = new SimpleNode(JJTOPEN_BR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(OPEN_BR);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
     jjtn000.setTokenName(t.image);
     {if (true) return t;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public Token CloseBr() throws ParseException {
 /*@bgen(jjtree) CLOSE_BR */
   SimpleNode jjtn000 = new SimpleNode(JJTCLOSE_BR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(CLOSE_BR);
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
     jjtn000.setTokenName(t.image);
     {if (true) return t;}
    } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
    }
    throw new Error("Missing return statement in function");
  }

  final public void Function() throws ParseException {
 /*@bgen(jjtree) FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        FunctionSin(jjtn000);
        break;
      case 24:
        FunctionASin(jjtn000);
        break;
      case 25:
        FunctionCos(jjtn000);
        break;
      case 26:
        FunctionACos(jjtn000);
        break;
      case 27:
        FunctionTan(jjtn000);
        break;
      case 28:
        FunctionATan(jjtn000);
        break;
      case 29:
        FunctionSec(jjtn000);
        break;
      case 30:
        FunctionCsc(jjtn000);
        break;
      case 31:
        FunctionCot(jjtn000);
        break;
      case 32:
        FunctionExp(jjtn000);
        break;
      case 33:
        FunctionSqrt(jjtn000);
        break;
      case 34:
        FunctionLn(jjtn000);
        break;
      case 35:
        FunctionLg(jjtn000);
        break;
      case 36:
        FunctionLog(jjtn000);
        break;
      case 37:
        FunctionFact(jjtn000);
        break;
      case 38:
        FunctionACot(jjtn000);
        break;
      case 39:
        FunctionASec(jjtn000);
        break;
      case 40:
        FunctionACsc(jjtn000);
        break;
      case 41:
        FunctionAbs(jjtn000);
        break;
      case 42:
        FunctionSinh(jjtn000);
        break;
      case 43:
        FunctionASinh(jjtn000);
        break;
      case 44:
        FunctionCosh(jjtn000);
        break;
      case 45:
        FunctionACosh(jjtn000);
        break;
      case 46:
        FunctionTanh(jjtn000);
        break;
      case 47:
        FunctionATanh(jjtn000);
        break;
      case 48:
        FunctionCoth(jjtn000);
        break;
      case 49:
        FunctionACoth(jjtn000);
        break;
      case 50:
        FunctionSech(jjtn000);
        break;
      case 51:
        FunctionASech(jjtn000);
        break;
      case 52:
        FunctionCsch(jjtn000);
        break;
      case 53:
        FunctionACsch(jjtn000);
        break;
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FunctionSin(SimpleNode function) throws ParseException {
    jj_consume_token(23);
         function.setTokenName("sin");
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionASin(SimpleNode function) throws ParseException {
    jj_consume_token(24);
            function.setTokenName("arcsin");
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionCos(SimpleNode function) throws ParseException {
    jj_consume_token(25);
         function.setTokenName("cos");
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionACos(SimpleNode function) throws ParseException {
    jj_consume_token(26);
            function.setTokenName("arccos");
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionTan(SimpleNode function) throws ParseException {
    jj_consume_token(27);
         function.setTokenName("tan");
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionATan(SimpleNode function) throws ParseException {
    jj_consume_token(28);
            function.setTokenName("arctan");
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionSec(SimpleNode function) throws ParseException {
    jj_consume_token(29);
         function.setTokenName("sec");
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionCsc(SimpleNode function) throws ParseException {
    jj_consume_token(30);
         function.setTokenName("csc");
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionCot(SimpleNode function) throws ParseException {
    jj_consume_token(31);
         function.setTokenName("cot");
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte001;}
    }
    if (jjte001 instanceof ParseException) {
      {if (true) throw (ParseException)jjte001;}
    }
    {if (true) throw (Error)jjte001;}
    } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
    }
  }

  final public void FunctionExp(SimpleNode function) throws ParseException {
    jj_consume_token(32);
          function.setTokenName("exp");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionSqrt(SimpleNode function) throws ParseException {
    jj_consume_token(33);
           function.setTokenName("sqrt");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionLn(SimpleNode function) throws ParseException {
    jj_consume_token(34);
         function.setTokenName("ln");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionLg(SimpleNode function) throws ParseException {
    jj_consume_token(35);
         function.setTokenName("lg");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionLog(SimpleNode function) throws ParseException {
    jj_consume_token(36);
          function.setTokenName("log");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
     SimpleNode jjtn002 = new SimpleNode(JJTARG);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
    try {
      UnaryExpression();
    } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte002;}
     }
     if (jjte002 instanceof ParseException) {
       {if (true) throw (ParseException)jjte002;}
     }
     {if (true) throw (Error)jjte002;}
    } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
    }
  }

  final public void FunctionFact(SimpleNode function) throws ParseException {
    jj_consume_token(37);
           function.setTokenName("fact");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionACot(SimpleNode function) throws ParseException {
    jj_consume_token(38);
             function.setTokenName("arccot");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionASec(SimpleNode function) throws ParseException {
    jj_consume_token(39);
             function.setTokenName("arcsec");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionACsc(SimpleNode function) throws ParseException {
    jj_consume_token(40);
             function.setTokenName("arccsc");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionAbs(SimpleNode function) throws ParseException {
    jj_consume_token(41);
          function.setTokenName("abs");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionSinh(SimpleNode function) throws ParseException {
    jj_consume_token(42);
           function.setTokenName("sinh");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionASinh(SimpleNode function) throws ParseException {
    jj_consume_token(43);
              function.setTokenName("arcsinh");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionCosh(SimpleNode function) throws ParseException {
    jj_consume_token(44);
           function.setTokenName("cosh");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionACosh(SimpleNode function) throws ParseException {
    jj_consume_token(45);
              function.setTokenName("arccosh");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionTanh(SimpleNode function) throws ParseException {
    jj_consume_token(46);
           function.setTokenName("tanh");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionATanh(SimpleNode function) throws ParseException {
    jj_consume_token(47);
              function.setTokenName("arctanh");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionCoth(SimpleNode function) throws ParseException {
    jj_consume_token(48);
           function.setTokenName("coth");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionACoth(SimpleNode function) throws ParseException {
    jj_consume_token(49);
              function.setTokenName("arccoth");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionSech(SimpleNode function) throws ParseException {
    jj_consume_token(50);
           function.setTokenName("sech");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionASech(SimpleNode function) throws ParseException {
    jj_consume_token(51);
              function.setTokenName("arcsech");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionCsch(SimpleNode function) throws ParseException {
    jj_consume_token(52);
           function.setTokenName("csch");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final public void FunctionACsch(SimpleNode function) throws ParseException {
    jj_consume_token(53);
              function.setTokenName("arccsch");
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
    try {
      UnaryExpression();
    } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte001;}
     }
     if (jjte001 instanceof ParseException) {
       {if (true) throw (ParseException)jjte001;}
     }
     {if (true) throw (Error)jjte001;}
    } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
    }
  }

  final private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  final private boolean jj_3R_16() {
    if (jj_3R_47()) return true;
    return false;
  }

  final private boolean jj_3R_15() {
    if (jj_3R_46()) return true;
    return false;
  }

  final private boolean jj_3R_56() {
    if (jj_scan_token(40)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_14() {
    if (jj_3R_45()) return true;
    return false;
  }

  final private boolean jj_3R_13() {
    if (jj_3R_44()) return true;
    return false;
  }

  final private boolean jj_3R_12() {
    if (jj_3R_43()) return true;
    return false;
  }

  final private boolean jj_3R_11() {
    if (jj_3R_42()) return true;
    return false;
  }

  final private boolean jj_3R_55() {
    if (jj_scan_token(39)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_10() {
    if (jj_3R_41()) return true;
    return false;
  }

  final private boolean jj_3R_9() {
    if (jj_3R_40()) return true;
    return false;
  }

  final private boolean jj_3R_8() {
    if (jj_3R_39()) return true;
    return false;
  }

  final private boolean jj_3R_7() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_8()) {
    jj_scanpos = xsp;
    if (jj_3R_9()) {
    jj_scanpos = xsp;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) {
    jj_scanpos = xsp;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) {
    jj_scanpos = xsp;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) {
    jj_scanpos = xsp;
    if (jj_3R_19()) {
    jj_scanpos = xsp;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) {
    jj_scanpos = xsp;
    if (jj_3R_38()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_54() {
    if (jj_scan_token(38)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_53() {
    if (jj_scan_token(37)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_52() {
    if (jj_scan_token(36)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_51() {
    if (jj_scan_token(35)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_81() {
    if (jj_scan_token(OPEN_BR)) return true;
    return false;
  }

  final private boolean jj_3R_50() {
    if (jj_scan_token(34)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_49() {
    if (jj_scan_token(33)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_80() {
    if (jj_scan_token(PI)) return true;
    return false;
  }

  final private boolean jj_3R_48() {
    if (jj_scan_token(32)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_79() {
    if (jj_scan_token(IDENTIFIER)) return true;
    return false;
  }

  final private boolean jj_3R_47() {
    if (jj_scan_token(31)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_46() {
    if (jj_scan_token(30)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_78() {
    if (jj_scan_token(NUMBER)) return true;
    return false;
  }

  final private boolean jj_3R_69() {
    if (jj_scan_token(53)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_45() {
    if (jj_scan_token(29)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_68() {
    if (jj_scan_token(52)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_44() {
    if (jj_scan_token(28)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_77() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  final private boolean jj_3R_67() {
    if (jj_scan_token(51)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_43() {
    if (jj_scan_token(27)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_76() {
    if (jj_3R_81()) return true;
    return false;
  }

  final private boolean jj_3R_66() {
    if (jj_scan_token(50)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_75() {
    if (jj_3R_80()) return true;
    return false;
  }

  final private boolean jj_3R_42() {
    if (jj_scan_token(26)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3_1() {
    if (jj_3R_7()) return true;
    return false;
  }

  final private boolean jj_3R_74() {
    if (jj_3R_79()) return true;
    return false;
  }

  final private boolean jj_3R_73() {
    if (jj_3R_78()) return true;
    return false;
  }

  final private boolean jj_3R_72() {
    if (jj_3R_77()) return true;
    return false;
  }

  final private boolean jj_3R_71() {
    if (jj_3R_76()) return true;
    return false;
  }

  final private boolean jj_3R_65() {
    if (jj_scan_token(49)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_41() {
    if (jj_scan_token(25)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_70() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_71()) {
    jj_scanpos = xsp;
    if (jj_3R_72()) {
    jj_scanpos = xsp;
    if (jj_3R_73()) {
    jj_scanpos = xsp;
    if (jj_3R_74()) {
    jj_scanpos = xsp;
    if (jj_3_1()) {
    jj_scanpos = xsp;
    if (jj_3R_75()) return true;
    }
    }
    }
    }
    }
    return false;
  }

  final private boolean jj_3R_64() {
    if (jj_scan_token(48)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_40() {
    if (jj_scan_token(24)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_63() {
    if (jj_scan_token(47)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_39() {
    if (jj_scan_token(23)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_62() {
    if (jj_scan_token(46)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_38() {
    if (jj_3R_69()) return true;
    return false;
  }

  final private boolean jj_3R_37() {
    if (jj_3R_68()) return true;
    return false;
  }

  final private boolean jj_3R_36() {
    if (jj_3R_67()) return true;
    return false;
  }

  final private boolean jj_3R_35() {
    if (jj_3R_66()) return true;
    return false;
  }

  final private boolean jj_3R_61() {
    if (jj_scan_token(45)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_34() {
    if (jj_3R_65()) return true;
    return false;
  }

  final private boolean jj_3R_33() {
    if (jj_3R_64()) return true;
    return false;
  }

  final private boolean jj_3R_32() {
    if (jj_3R_63()) return true;
    return false;
  }

  final private boolean jj_3R_31() {
    if (jj_3R_62()) return true;
    return false;
  }

  final private boolean jj_3R_60() {
    if (jj_scan_token(44)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_30() {
    if (jj_3R_61()) return true;
    return false;
  }

  final private boolean jj_3R_29() {
    if (jj_3R_60()) return true;
    return false;
  }

  final private boolean jj_3R_28() {
    if (jj_3R_59()) return true;
    return false;
  }

  final private boolean jj_3R_27() {
    if (jj_3R_58()) return true;
    return false;
  }

  final private boolean jj_3R_59() {
    if (jj_scan_token(43)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_26() {
    if (jj_3R_57()) return true;
    return false;
  }

  final private boolean jj_3R_25() {
    if (jj_3R_56()) return true;
    return false;
  }

  final private boolean jj_3R_24() {
    if (jj_3R_55()) return true;
    return false;
  }

  final private boolean jj_3R_23() {
    if (jj_3R_54()) return true;
    return false;
  }

  final private boolean jj_3R_58() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_22() {
    if (jj_3R_53()) return true;
    return false;
  }

  final private boolean jj_3R_21() {
    if (jj_3R_52()) return true;
    return false;
  }

  final private boolean jj_3R_20() {
    if (jj_3R_51()) return true;
    return false;
  }

  final private boolean jj_3R_19() {
    if (jj_3R_50()) return true;
    return false;
  }

  final private boolean jj_3R_57() {
    if (jj_scan_token(41)) return true;
    if (jj_3R_70()) return true;
    return false;
  }

  final private boolean jj_3R_18() {
    if (jj_3R_49()) return true;
    return false;
  }

  final private boolean jj_3R_17() {
    if (jj_3R_48()) return true;
    return false;
  }

  public StringMathParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  public Token token, jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  public boolean lookingAhead = false;
  private boolean jj_semLA;
  private int jj_gen;
  final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_0();
      jj_la1_1();
   }
   private static void jj_la1_0() {
      jj_la1_0 = new int[] {0x80000,0x20000,0x40000,0x8000,0x10000,0xffa46880,0x100000,0x202880,0x4000,0xff800000,};
   }
   private static void jj_la1_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x0,0x0,0x3fffff,0x0,0x0,0x0,0x3fffff,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[1];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  public StringMathParser(java.io.InputStream stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StringMathParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.InputStream stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public StringMathParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new StringMathParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public StringMathParser(StringMathParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  public void ReInit(StringMathParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  final private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  final private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }

  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

  final public Token getToken(int index) {
    Token t = lookingAhead ? jj_scanpos : token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  final private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.Vector jj_expentries = new java.util.Vector();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      boolean exists = false;
      for (java.util.Enumeration e = jj_expentries.elements(); e.hasMoreElements();) {
        int[] oldentry = (int[])(e.nextElement());
        if (oldentry.length == jj_expentry.length) {
          exists = true;
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              exists = false;
              break;
            }
          }
          if (exists) break;
        }
      }
      if (!exists) jj_expentries.addElement(jj_expentry);
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  public ParseException generateParseException() {
    jj_expentries.removeAllElements();
    boolean[] la1tokens = new boolean[54];
    for (int i = 0; i < 54; i++) {
      la1tokens[i] = false;
    }
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 54; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.addElement(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.elementAt(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  final public void enable_tracing() {
  }

  final public void disable_tracing() {
  }

  final private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
    }
    jj_rescan = false;
  }

  final private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
