/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. stringmath.jj */
/*@egen*/
options
{                                                
	STATIC = false;
	USER_CHAR_STREAM = false;
	USER_TOKEN_MANAGER = false;
	FORCE_LA_CHECK=true;
}

PARSER_BEGIN(StringMathParser)

package org.clematis.math.reference.parser.string;

import java.io.StringReader;import org.clematis.math.v1.parser.string.JJTStringMathParserState;import org.clematis.math.v1.reference.parser.string.StringMathParserTreeConstants;

public class StringMathParser/*@bgen(jjtree)*/implements StringMathParserTreeConstants/*@egen*/
{/*@bgen(jjtree)*/
  protected JJTStringMathParserState jjtree = new JJTStringMathParserState();

/*@egen*/
  public static String parse(String expr)
  {
    org.clematis.math.v1.reference.parser.string.StringMathParser parser = new StringMathParser(new StringReader(expr));

    try
    {
      SimpleNode n = parser.Start();
      StringBuilder sb = new StringBuilder();
      WebTexPrinter.print(n, sb);
      return sb.toString();
    }
    catch (Exception e)
    {
       e.printStackTrace();
    }

    return null;
  }

  public static void main(String args[])
  {
    //System.out.println("Reading from standard input...");
    //StringMathParser parser = new StringMathParser(System.in);

    //String expr = "sin(3)";
    //String expr = "x+(sin(${x}/2)+a_2/9 * x ^ 3)";
    //String expr = "$b3*(x$x0_rsgn$x0_abs)*(x$x1_rsgn$x1_abs)*(x$x2_rsgn$x2_abs)" +
     //       "+$b2*(x$x0_rsgn$x0_abs)*(x$x1_rsgn$x1_abs)+$b1*(x$x0_rsgn$x0_abs)+$b0+sin(x)";
   // String expr = "-ln($a)*pi/(x*(ln(x)^2)) + (1 - 8 )";
    //String expr = "-ln(((($a+1)*($k-9))))*pi/(x*(ln(x)^2))-(x-y)";
    //String expr = "-ln($a+cos($k*x))/$k + sinx";
    String expr = "1/(2*(x+1)^(0.5))";
    StringMathParser parser = new StringMathParser(new StringReader(expr));

    try
    {
      SimpleNode n = parser.Start();
      n.dump(" ");
      System.out.println( expr );
      StringBuilder sb = new StringBuilder();
      WebTexPrinter.print(n, sb);
      System.out.println("------------");
      System.out.println(sb.toString());
    }
    catch (Exception e)
    {
       e.printStackTrace();
    }
  }
}}
}}
}

PARSER_END(StringMathParser)

SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
}

TOKEN : /* LITERALS */
{
  < NUMBER: <INTEGER> | <FLOAT> >
|
  < #INTEGER: ["1"-"9"] (["0"-"9"])* >
|
  < #FLOAT: // comment: (<INTEGER>)? "." <INTEGER>] (<EXPONENT>)?>

        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      | (["0"-"9"])+ (<EXPONENT>)? >
  |
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER:
                 <LETTER> | <LETTER> ("_" <LETTER>)+ | <LETTER> ("_")? <NUMBER>
  >
|
  < #LETTER: ["a"-"z","A"-"Z"] >
}

TOKEN:
{
  < VARIABLE: "$" ("{")?
                    <LETTER> ( <LETTER> | <NUMBER> )* ("_")? ( <LETTER> | <NUMBER> )*
                  ("}")?
  >
}

/* CONSTANTS */
TOKEN :
{
   <  PI: "pi">
}

TOKEN :
{
    < MULT: "*" >
}

TOKEN :
{
    < DIV: "/" >
}

TOKEN :
{
    < PLUS: "+" >
}

TOKEN :
{
    < MINUS: "-" >
}

TOKEN :
{
    < EQUALS: "=" >
}

TOKEN :
{
    < POWER: "^" >
}

TOKEN :
{
    < OPEN_BR: "(" | "[" | "{" >
}

TOKEN :
{
    < CLOSE_BR: ")" | "]" | "}" >
}

SimpleNode Start() : {}
{/*@bgen(jjtree) EXPR */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
     Expression()<EOF>/*@bgen(jjtree)*/
     {
       jjtree.closeNodeScope(jjtn001, true);
       jjtc001 = false;
     }
/*@egen*/
     { return jjtn001; }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}


void Expression()           :
{/*@bgen(jjtree) #EXPR(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) #EXPR(> 1) */
  try {
/*@egen*/
  (
    (PlusExpression() ( (( t=<EQUALS> ){jjtn000.setTokenName(t.image);} PlusExpression()))*)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

/*void NegativeExpr() :
{
}
{
  (
      <MINUS> PlusExpression()
  )
  #UNARY_MINUS  |  PlusExpression()
}*/

void PlusExpression()                 :
{/*@bgen(jjtree) #PLUS_EXPR(> 1) */
   SimpleNode jjtn000 = new SimpleNode(JJTPLUS_EXPR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) #PLUS_EXPR(> 1) */
  try {
/*@egen*/
  (
     (MinusExpression() (  (( t=<PLUS> ){jjtn000.setTokenName(t.image);} MinusExpression()))*)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void MinusExpression()                  :
{/*@bgen(jjtree) #MINUS_EXPR(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTMINUS_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) #MINUS_EXPR(> 1) */
  try {
/*@egen*/
  (
     (MultExpression() (  (( t=<MINUS> ){jjtn000.setTokenName(t.image);} MultExpression()))*)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void MultExpression()                 :
{/*@bgen(jjtree) #MULT_EXPR(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTMULT_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
  Token t;
}
{/*@bgen(jjtree) #MULT_EXPR(> 1) */
  try {
/*@egen*/
  (
     DivExpression() ( ( t=<MULT> {jjtn000.setTokenName(t.image);}  DivExpression())  )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void DivExpression()                :
{/*@bgen(jjtree) #DIV_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTDIV_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) #DIV_EXPR(> 1) */
  try {
/*@egen*/
  (
    (NegativeExpr() (  ( t=<DIV> ){jjtn000.setTokenName(t.image);} NegativeExpr()) *)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void NegativeExpr() :
{
}
{/*@bgen(jjtree) UNARY_MINUS */
     {
       SimpleNode jjtn001 = new SimpleNode(JJTUNARY_MINUS);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/
     (<MINUS> PowerExpression() )/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
     }
/*@egen*/  | PowerExpression()
}

void PowerExpression()                  :
{/*@bgen(jjtree) #POWER_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTPOWER_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) #POWER_EXPR(> 1) */
  try {
/*@egen*/
  (
     UnaryExpression() ( ( t=<POWER> ){jjtn000.setTokenName(t.image);} UnaryExpression() )*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void UnaryExpression() :
{
}
{
  (
      BrExpression()
    | Variable()
    | Number()
    | Identifier()
    | LOOKAHEAD(2) Function()  //look-ahead "e ^ x" and "e + expression"
    | PI()
  )
}

void BrExpression()         :
{/*@bgen(jjtree) BR_EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTBR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) BR_EXPR */
  try {
/*@egen*/
  (
    OpenBr() Expression() CloseBr()
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}


Token Variable()      :
{/*@bgen(jjtree) VAR */
    SimpleNode jjtn000 = new SimpleNode(JJTVAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) VAR */
  try {
/*@egen*/
  (
    t=<VARIABLE>
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setTokenName(t.image);
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Number()         :
{/*@bgen(jjtree) NUMBER */
    SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) NUMBER */
  try {
/*@egen*/
  (
    t=<NUMBER>
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setTokenName(t.image);
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Identifier()             :
{/*@bgen(jjtree) IDENTIFIER */
    SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) IDENTIFIER */
  try {
/*@egen*/
  (
    t=<IDENTIFIER>
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setTokenName(t.image);
    return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token PI()     :
{/*@bgen(jjtree) PI */
   SimpleNode jjtn000 = new SimpleNode(JJTPI);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) PI */
 try {
/*@egen*/
 (
   t=<PI>
 )/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
     jjtn000.setTokenName("\\" + t.image);
     return t;
 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

Token OpenBr()          :
{/*@bgen(jjtree) OPEN_BR */
   SimpleNode jjtn000 = new SimpleNode(JJTOPEN_BR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) OPEN_BR */
 try {
/*@egen*/
 (
   t=<OPEN_BR>
 )/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
     jjtn000.setTokenName(t.image);
     return t;
 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

Token CloseBr()           :
{/*@bgen(jjtree) CLOSE_BR */
   SimpleNode jjtn000 = new SimpleNode(JJTCLOSE_BR);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) CLOSE_BR */
 try {
/*@egen*/
 (
   t=<CLOSE_BR>
 )/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
     jjtn000.setTokenName(t.image);
     return t;
 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Function()           :
{/*@bgen(jjtree) FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) FUNCTION */
  try {
/*@egen*/
  (
    FunctionSin(jjtn000)
    |
    FunctionASin(jjtn000)
    |
    FunctionCos(jjtn000)
    |
    FunctionACos(jjtn000)
    |
    FunctionTan(jjtn000)
    |
    FunctionATan(jjtn000)
    |
    FunctionSec(jjtn000)
    |
    FunctionCsc(jjtn000)
    |
    FunctionCot(jjtn000)
    |
    FunctionExp(jjtn000)
    |
    FunctionSqrt(jjtn000)
    |
    FunctionLn(jjtn000)
    |
    FunctionLg(jjtn000)
    |
    FunctionLog(jjtn000)
    |
    FunctionFact(jjtn000)
    |
    FunctionACot(jjtn000)
    |
    FunctionASec(jjtn000)
    |
    FunctionACsc(jjtn000)
    |
    FunctionAbs(jjtn000)
    |
    FunctionSinh(jjtn000)
    |
    FunctionASinh(jjtn000)
    |
    FunctionCosh(jjtn000)
    |
    FunctionACosh(jjtn000)
    |
    FunctionTanh(jjtn000)
    |
    FunctionATanh(jjtn000)
    |
    FunctionCoth(jjtn000)
    |
    FunctionACoth(jjtn000)
    |
    FunctionSech(jjtn000)
    |
    FunctionASech(jjtn000)
    |
    FunctionCsch(jjtn000)
    |
    FunctionACsch(jjtn000)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void FunctionSin(SimpleNode function) :
{
}
{
  "sin" {function.setTokenName("sin");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionASin(SimpleNode function) :
{
}
{
  "arcsin" {function.setTokenName("arcsin");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionCos(SimpleNode function) :
{
}
{
  "cos" {function.setTokenName("cos");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionACos(SimpleNode function) :
{
}
{
  "arccos" {function.setTokenName("arccos");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionTan(SimpleNode function) :
{
}
{
  "tan" {function.setTokenName("tan");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionATan(SimpleNode function) :
{
}
{
  "arctan" {function.setTokenName("arctan");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionSec(SimpleNode function) :
{
}
{
  "sec" {function.setTokenName("sec");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionCsc(SimpleNode function) :
{
}
{
  "csc" {function.setTokenName("csc");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionCot(SimpleNode function) :
{
}
{
  "cot" {function.setTokenName("cot");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionExp(SimpleNode function) :
{
}
{
   "exp" {function.setTokenName("exp");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionSqrt(SimpleNode function) :
{
}
{
   "sqrt" {function.setTokenName("sqrt");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionLn(SimpleNode function) :
{
}
{
   "ln" {function.setTokenName("ln");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionLg(SimpleNode function) :
{
}
{
   "lg" {function.setTokenName("lg");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionLog(SimpleNode function) :
{
}
{
   "log" {function.setTokenName("log");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*//*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn002 = new SimpleNode(JJTARG);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       throw (RuntimeException)jjte002;
     }
     if (jjte002 instanceof ParseException) {
       throw (ParseException)jjte002;
     }
     throw (Error)jjte002;
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/
}

void FunctionFact(SimpleNode function) :
{
}
{
   "fact" {function.setTokenName("fact");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionACot(SimpleNode function) :
{
}
{
   "arccot" {function.setTokenName("arccot");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionASec(SimpleNode function) :
{
}
{
   "arcsec" {function.setTokenName("arcsec");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionACsc(SimpleNode function) :
{
}
{
   "arccsc" {function.setTokenName("arccsc");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionAbs(SimpleNode function) :
{
}
{
   "abs" {function.setTokenName("abs");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionSinh(SimpleNode function) :
{
}
{
   "sinh" {function.setTokenName("sinh");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionASinh(SimpleNode function) :
{
}
{
   "arcsinh" {function.setTokenName("arcsinh");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionCosh(SimpleNode function) :
{
}
{
   "cosh" {function.setTokenName("cosh");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionACosh(SimpleNode function) :
{
}
{
   "arccosh" {function.setTokenName("arccosh");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionTanh(SimpleNode function) :
{
}
{
   "tanh" {function.setTokenName("tanh");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionATanh(SimpleNode function) :
{
}
{
   "arctanh" {function.setTokenName("arctanh");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionCoth(SimpleNode function) :
{
}
{
   "coth" {function.setTokenName("coth");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionACoth(SimpleNode function) :
{
}
{
   "arccoth" {function.setTokenName("arccoth");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionSech(SimpleNode function) :
{
}
{
   "sech" {function.setTokenName("sech");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionASech(SimpleNode function) :
{
}
{
   "arcsech" {function.setTokenName("arcsech");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionCsch(SimpleNode function) :
{
}
{
   "csch" {function.setTokenName("csch");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}


void FunctionACsch(SimpleNode function) :
{
}
{
   "arccsch" {function.setTokenName("arccsch");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}


