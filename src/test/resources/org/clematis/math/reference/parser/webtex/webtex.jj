/*@bgen(jjtree) Generated By: webtex.jjt,v 1.6 2005/04/21 13&JJTree: Do not edit this line. webtex.jj */
/*@egen*/// $Id: webtex.jj,v 1.1 2007/02/12 09:46:05 tysinsh Exp $
// Created: 23.12.2004 T 11:34:58



options {                                                
	STATIC = false;
	USER_CHAR_STREAM = false;
	USER_TOKEN_MANAGER = false;
	FORCE_LA_CHECK=true;
}
PARSER_BEGIN(WebTexParser)

package org.clematis.math.reference.parser.webtex;
import java.io.StringReader;

public class WebTexParser/*@bgen(jjtree)*/implements WebTexParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTWebTexParserState jjtree = new JJTWebTexParserState();public WebTexParser() {
    }

/*@egen*/
  public static void main(String args[]) {

    //System.out.println("Reading from standard input...");
    //WebTexParser parser = new WebTexParser(System.in);

    //String expr = "\\sin {\\sin ^ {-1} c}";
    String expr = "x+\\frac{x}{2}+\\frac{a_2}{\\gamma^2}";
    WebTexParser parser = new WebTexParser(new StringReader(expr));

    try {
      SimpleNode n = parser.Start();
      n.dump("");
      //System.out.println("Thank you.");
    } catch (Exception e) {
      System.out.println("Oops.");
      System.out.println(e.getMessage());
      e.printStackTrace();
    }
  }
}}
}

PARSER_END(WebTexParser)


SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
| <"/*" (~["*"])* "*" (~["/"] (~["*"])* "*")* "/" >
}

TOKEN : /* LITERALS */
{
  < NUMBER:
        <INTEGER>
      | <FLOAT>
  >
|
  < #INTEGER: ["1"-"9"] (["0"-"9"])* >
|
  < #FLOAT: //(<INTEGER>)? "." <INTEGER>] (<EXPONENT>)?>

        (["0"-"9"])+ "." (["0"-"9"])* (<EXPONENT>)?
      | "." (["0"-"9"])+ (<EXPONENT>)?
      | (["0"-"9"])+ <EXPONENT>
      | (["0"-"9"])+ (<EXPONENT>)? >
  |
  < #EXPONENT: ["e","E"] (["+","-"])? (["0"-"9"])+ >
}

//todo add all greek symbols
TOKEN : /* IDENTIFIERS */
{
  < IDENTIFIER: <LETTER>>
|
  < #LETTER: ["a"-"d","f"-"z","A"-"Z"] //exclude "e" - ExponentialE
  //< #LETTER: ["a"-"z","A"-"Z"]
        | "\\alpha"
        | "\\beta"
        | "\\gamma"
        | "\\delta"
        | "\\epsilon"
        | "\\varepsilon"
        | "\\zeta"
        | "\\eta"
        | "\\theta"
        | "\\vartheta"
        | "\\iota"
        | "\\kappa"
        | "\\lambda"
        | "\\mu"
        | "\\nu"
        | "\\xi"
        | "\\o"
        //| "\\pi"
        | "\\varpi"
        | "\\rho"
        | "\\varrho"
        | "\\sigma"
        | "\\tau"
        | "\\upsilon"
        | "\\phi"
        | "\\varphi"
        | "\\chi"
        | "\\psi"
        | "\\omega"

        | "\\Delta"
        | "\\Gamma"
        | "\\Lambda"
        | "\\Omega"
        | "\\Phi"
        | "\\Pi"
        | "\\Psi"
        | "\\Sigma"
        | "\\Theta"
        | "\\Xi"
        | "\\Upsilon"
 >
}

/* CONSTANTS */
TOKEN :
{
   <  PI: "\\pi">
}


TOKEN :
{
   <  EXP_E: "e" >
}


//TOKEN :
//{
//    < FNAME: "\\sin" | "\\cos" | "\\tan" | "\\frac" >
//}

TOKEN :
{
    < MULT: "*" | "\\times" | "\\cdot">
}

TOKEN :
{
    < DIV: "/" | "\\div" >
}

TOKEN :
{
    < PLUS: "+" >
}

TOKEN :
{
    < MINUS: "-" >
}

TOKEN :
{
    < EQUALS: "=" >
}


SimpleNode Start() : {}
{/*@bgen(jjtree) EXPR */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTEXPR);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  (
      Expression()<EOF>/*@bgen(jjtree)*/
      {
        jjtree.closeNodeScope(jjtn001, true);
        jjtc001 = false;
      }
/*@egen*/
      { return jjtn001; }
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}


void Expression() : {}
{
  EqualsExpression()
}

void EqualsExpression()                  :
{/*@bgen(jjtree) #EQUALS_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTEQUALS_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    String image=null;
    Token t;
}
{/*@bgen(jjtree) #EQUALS_EXPR(> 1) */
  try {
/*@egen*/
  (
        PlusExpression() ( ( t=<EQUALS>{image=t.image;} ) PlusExpression() )*
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    jjtc000 = false;
  }
/*@egen*/
  {
    jjtn000.setTokenImage(image);
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}


/*
void NegativeExpr() :
{
}
{
     (<MINUS> PlusExpression() )#UNARY_MINUS  |
     PlusExpression()
}
*/


void PlusExpression()                 :
{/*@bgen(jjtree) #PLUS_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTPLUS_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) #PLUS_EXPR(> 1) */
  try {
/*@egen*/
  (
        (MinusExpression() (  (( t=<PLUS>){jjtn000.setTokenImage(t.image);} MinusExpression()))*)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/

}

void MinusExpression()                  :
{/*@bgen(jjtree) #MINUS_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTMINUS_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) #MINUS_EXPR(> 1) */
  try {
/*@egen*/
  (
        (MultExpression() (  (( t=<MINUS> ){jjtn000.setTokenImage(t.image);} MultExpression()))*)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void MultExpression()                 :
{/*@bgen(jjtree) #MULT_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTMULT_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t=null;
}
{/*@bgen(jjtree) #MULT_EXPR(> 1) */
  try {
/*@egen*/
  (
        DivExpressionMinus() ( ( t=<MULT> {jjtn000.setTokenImage(t.image);}  DivExpressionMinus()) | {jjtn000.setTokenImage("*");}DivExpression())*
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

//divide expression without unary minus
void DivExpression()                :
{/*@bgen(jjtree) #DIV_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTDIV_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) #DIV_EXPR(> 1) */
  try {
/*@egen*/
  (
        (PowerExpression() (  ( t=<DIV> ){jjtn000.setTokenImage(t.image);} PowerExpression()) *)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}


//divide expression with unary minus
void DivExpressionMinus()                :
{/*@bgen(jjtree) #DIV_EXPR(> 1) */
    SimpleNode jjtn000 = new SimpleNode(JJTDIV_EXPR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) #DIV_EXPR(> 1) */
  try {
/*@egen*/
  (
        (NegativeExpr() (  ( t=<DIV> ){jjtn000.setTokenImage(t.image);} NegativeExpr()) *)
  )/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
    }
  }
/*@egen*/
}

void NegativeExpr() :
{
}
{/*@bgen(jjtree) UNARY_MINUS */
     {
       SimpleNode jjtn001 = new SimpleNode(JJTUNARY_MINUS);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
     }
     try {
/*@egen*/
     (<MINUS> PowerExpression() )/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001, true);
       }
     }
/*@egen*/  | PowerExpression()
}


void PowerExpression()                  : {/*@bgen(jjtree) #POWER_EXPR(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTPOWER_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #POWER_EXPR(> 1) */
   try {
/*@egen*/
   (
         IndexExpression() ( ( "^" ) IndexExpression() )*
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}

void IndexExpression()                  : {/*@bgen(jjtree) #INDEX_EXPR(> 1) */
  SimpleNode jjtn000 = new SimpleNode(JJTINDEX_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) #INDEX_EXPR(> 1) */
   try {
/*@egen*/
   (
         UnaryExpression() ( ( "_" ) UnaryExpression() )*
   )/*@bgen(jjtree)*/
   } catch (Throwable jjte000) {
     if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       throw (RuntimeException)jjte000;
     }
     if (jjte000 instanceof ParseException) {
       throw (ParseException)jjte000;
     }
     throw (Error)jjte000;
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
     }
   }
/*@egen*/
}


void UnaryExpression() : {}
{
   (
       "(" Expression() ")"
     | "{" Expression() "}"
     | "[" Expression() "]"
     | Variable()
     | Number()
     | /*LOOKAHEAD(2)*/ Function()  //look-ahead "e ^ x" ("\exp{x}")  and "e + expression"
     | Constant()

   )
}

void Variable()      :
{/*@bgen(jjtree) VAR */
    SimpleNode jjtn000 = new SimpleNode(JJTVAR);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) VAR */
  try {
/*@egen*/
  (
    (t= <IDENTIFIER> {jjtn000.setTokenImage(t.image);})
  )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {

    // return t;
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

Token Number()         :
{/*@bgen(jjtree) NUMBER */
    SimpleNode jjtn000 = new SimpleNode(JJTNUMBER);
    boolean jjtc000 = true;
    jjtree.openNodeScope(jjtn000);
/*@egen*/
    Token t;
}
{/*@bgen(jjtree) NUMBER */
 try {
/*@egen*/
 (
   t=<NUMBER>
 )/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  {
     jjtn000.setTokenImage(t.image);
     return t;
  }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

Token Constant()           :
{/*@bgen(jjtree) CONSTANT */
   SimpleNode jjtn000 = new SimpleNode(JJTCONSTANT);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
/*@egen*/
   Token t;
}
{/*@bgen(jjtree) CONSTANT */
 try {
/*@egen*/
 (
   t=<EXP_E> | t=<PI>
   //t=<PI>
 )/*@bgen(jjtree)*/
 {
   jjtree.closeNodeScope(jjtn000, true);
   jjtc000 = false;
 }
/*@egen*/
 {
     jjtn000.setTokenImage(t.image);
     jjtn000.setTokenKind(t.kind);
     return t;
 }/*@bgen(jjtree)*/
 } finally {
   if (jjtc000) {
     jjtree.closeNodeScope(jjtn000, true);
   }
 }
/*@egen*/
}

void Function()           :
{/*@bgen(jjtree) FUNCTION */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/
}
{/*@bgen(jjtree) FUNCTION */
    try {
/*@egen*/
//    ( t=<FNAME> {jjtThis.setTokenImage(t.image);} ArgList() )

    (
          FunctionFrac(jjtn000)
          |
          FunctionSin(jjtn000)
          |
          FunctionASin(jjtn000)
          |
          FunctionCos(jjtn000)
          |
          FunctionACos(jjtn000)
          |
          FunctionTan(jjtn000)
          |
          FunctionATan(jjtn000)
          |
          FunctionSec(jjtn000)
          |
          FunctionCsc(jjtn000)
          |
          FunctionCot(jjtn000)
          |
          FunctionExp(jjtn000)
          |
          FunctionSqrt(jjtn000)
          |
          FunctionRoot(jjtn000)
          |
          FunctionLn(jjtn000)
          |
          FunctionLg(jjtn000)
          |
          FunctionLog(jjtn000)
          //todo
    )/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
/*@egen*/
}

//void ArgList() : {}
//{
//    ( Variable() #ARG | Number() #ARG | Function()#ARG | ( "{" Expression() #ARG  "}" )+ )
//
//    //conflict "\fname {x} {y}"  - is it two args function or "\fname {x} * {y}"  ?
//
//}

void FunctionFrac(SimpleNode function) :
{
}
{
  "\\frac" {function.setTokenImage("frac");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*//*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn002 = new SimpleNode(JJTARG);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte002) {
    if (jjtc002) {
      jjtree.clearNodeScope(jjtn002);
      jjtc002 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte002 instanceof RuntimeException) {
      throw (RuntimeException)jjte002;
    }
    if (jjte002 instanceof ParseException) {
      throw (ParseException)jjte002;
    }
    throw (Error)jjte002;
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002, true);
    }
  }
/*@egen*/
}

//Unary function


void FunctionSin(SimpleNode function) :
{
}
{
  "\\sin" {function.setTokenImage("sin");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionASin(SimpleNode function) :
{
}
{
  "\\arcsin" {function.setTokenImage("arcsin");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionCos(SimpleNode function) :
{
}
{
  "\\cos" {function.setTokenImage("cos");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionACos(SimpleNode function) :
{
}
{
  "\\arccos" {function.setTokenImage("arccos");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionTan(SimpleNode function) :
{
}
{
  "\\tan" {function.setTokenImage("tan");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionATan(SimpleNode function) :
{
}
{
  "\\arctan" {function.setTokenImage("arctan");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionSec(SimpleNode function) :
{
}
{
  "\\sec" {function.setTokenImage("sec");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionCsc(SimpleNode function) :
{
}
{
  "\\csc" {function.setTokenImage("csc");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionCot(SimpleNode function) :
{
}
{
  "\\cot" {function.setTokenImage("cot");}/*@bgen(jjtree) ARG */
  {
    SimpleNode jjtn001 = new SimpleNode(JJTARG);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
  }
  try {
/*@egen*/
  UnaryExpression()/*@bgen(jjtree)*/
  } catch (Throwable jjte001) {
    if (jjtc001) {
      jjtree.clearNodeScope(jjtn001);
      jjtc001 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte001 instanceof RuntimeException) {
      throw (RuntimeException)jjte001;
    }
    if (jjte001 instanceof ParseException) {
      throw (ParseException)jjte001;
    }
    throw (Error)jjte001;
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001, true);
    }
  }
/*@egen*/
}

void FunctionExp(SimpleNode function) :
{
}
{
   //("\\exp" | <EXP_E> "^"){function.setTokenImage("exp");}
   "\\exp" {function.setTokenImage("exp");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionSqrt(SimpleNode function) :
{
}
{
   "\\sqrt" {function.setTokenImage("sqrt");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionRoot(SimpleNode function) :
{
}
{
   "\\root" {function.setTokenImage("root");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*//*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn002 = new SimpleNode(JJTARG);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       throw (RuntimeException)jjte002;
     }
     if (jjte002 instanceof ParseException) {
       throw (ParseException)jjte002;
     }
     throw (Error)jjte002;
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/
}

void FunctionLn(SimpleNode function) :
{
}
{
   "\\ln" {function.setTokenImage("ln");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionLg(SimpleNode function) :
{
}
{
   "\\lg" {function.setTokenImage("lg");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*/
}

void FunctionLog(SimpleNode function) :
{
}
{
   "\\log" {function.setTokenImage("log");}/*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn001 = new SimpleNode(JJTARG);
     boolean jjtc001 = true;
     jjtree.openNodeScope(jjtn001);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte001) {
     if (jjtc001) {
       jjtree.clearNodeScope(jjtn001);
       jjtc001 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte001 instanceof RuntimeException) {
       throw (RuntimeException)jjte001;
     }
     if (jjte001 instanceof ParseException) {
       throw (ParseException)jjte001;
     }
     throw (Error)jjte001;
   } finally {
     if (jjtc001) {
       jjtree.closeNodeScope(jjtn001, true);
     }
   }
/*@egen*//*@bgen(jjtree) ARG */
   {
     SimpleNode jjtn002 = new SimpleNode(JJTARG);
     boolean jjtc002 = true;
     jjtree.openNodeScope(jjtn002);
   }
   try {
/*@egen*/
   UnaryExpression()/*@bgen(jjtree)*/
   } catch (Throwable jjte002) {
     if (jjtc002) {
       jjtree.clearNodeScope(jjtn002);
       jjtc002 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte002 instanceof RuntimeException) {
       throw (RuntimeException)jjte002;
     }
     if (jjte002 instanceof ParseException) {
       throw (ParseException)jjte002;
     }
     throw (Error)jjte002;
   } finally {
     if (jjtc002) {
       jjtree.closeNodeScope(jjtn002, true);
     }
   }
/*@egen*/
}