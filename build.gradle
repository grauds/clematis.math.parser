plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
   // id 'org.javacc.javacc' version "3.0.2"
}

group = 'org.clematis'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}
/*
compileJavacc {
    inputDirectory = file('src/main/javacc')
    outputDirectory = file(project.buildDir.absolutePath + '/generated/javacc')
}

compileJjtree {
    inputDirectory = file('src/main/jjtree')
    outputDirectory = file(project.buildDir.absolutePath + '/generated/jjtree')
    arguments = [grammar_encoding: 'UTF-8', static: 'false']
}
*/
dependencies {

    compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.34'
    annotationProcessor 'org.projectlombok:lombok:1.18.34'

    checkstyle "com.puppycrawl.tools:checkstyle:10.17.0"

    implementation "javax.xml.bind:jaxb-api:2.3.0"
    implementation group: 'org.jdom', name: 'jdom', version: '2.0.2'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}

// ------------ Checkstyle configuration  ---------
checkstyle {
    configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
}

tasks.withType(Checkstyle).configureEach {
    exclude '**/org/clematis/math/v2/parsers/**'
}

// ------------ JaCoCo configuration  ---------
ext {
    setProperty('snippetsDir', file("build/generated-snippets"))
}

tasks.named('test') {
    useJUnitPlatform()
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = file("jacoco/jacocoTest.exec")
        classDumpDir = file("jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file('jacoco/html')
        xml.outputLocation = file('jacoco/jacoco.xml')
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")
}