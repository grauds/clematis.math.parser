plugins {
    id 'java'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs' version '6.0.7'
    id 'org.javacc.javacc' version "3.0.2"
    id 'maven-publish'
}

group = 'org.clematis'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '17'
}

repositories {
    mavenCentral()
}

dependencies {
    annotationProcessor 'org.projectlombok:lombok:1.18.20'
    checkstyle "com.puppycrawl.tools:checkstyle:10.17.0"

    compileOnly (
            'org.projectlombok:lombok:1.18.20',
            "com.github.spotbugs:spotbugs:4.8.4",
            "com.google.code.findbugs:annotations:3.0.1u2"
    )

    implementation "javax.xml.bind:jaxb-api:2.3.0"
    implementation group: 'org.jdom', name: 'jdom', version: '2.0.2'
    implementation group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    testAnnotationProcessor 'org.projectlombok:lombok:1.18.20'
    testCompileOnly(
            'org.projectlombok:lombok:1.18.20',
            "com.github.spotbugs:spotbugs:4.8.4",
            "com.google.code.findbugs:annotations:3.0.1u2"
    )
    testImplementation platform('org.junit:junit-bom:5.9.1')
    testImplementation 'org.junit.jupiter:junit-jupiter'
}
// ------------ JavaCC and JJTree configuration  ---------

sourceSets {
    main {
        java {
            srcDir "${buildDir}/generated/parsers"
        }
    }
}

compileJjtree {
    include '**/*.java'
    inputDirectory = file('src/main/resources/javacc')
    outputDirectory = file(project.buildDir.absolutePath + "/generated/parsers")
    arguments = [grammar_encoding: 'UTF-8', static: 'false']
}

tasks.register('deleteJitreeTemp', Delete) {
    delete fileTree(
            dir: project.buildDir.absolutePath + "/generated/parsers",
            include: '**/*.jj'
    )
}

compileJavacc {
    inputDirectory = file(project.buildDir.absolutePath + '/generated/parsers')
    outputDirectory = file(project.buildDir.absolutePath + '/generated/parsers')
} dependsOn(compileJjtree)

compileJavacc.configure { finalizedBy tasks.named('deleteJitreeTemp') }

// ------------ Checkstyle configuration  ---------
checkstyle {
    configProperties.configFile = file("${project.rootDir}/config/checkstyle/checkstyle.xml")
    configProperties.checkstyleSuppressionFile = file("${project.rootDir}/config/checkstyle/suppressions.xml")
}

tasks.withType(Checkstyle).configureEach {
    exclude '**/org/clematis/math/parsers/string/**'
}

// ------------ JaCoCo configuration  ---------
ext {
    setProperty('snippetsDir', file("build/generated-snippets"))
}

test {
    outputs.dir snippetsDir
    useJUnitPlatform()
    testLogging.showStandardStreams = true
    finalizedBy jacocoTestReport
    jacoco {
        destinationFile = file("jacoco/jacocoTest.exec")
        classDumpDir = file("jacoco/classpathdumps")
    }
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        csv.required = false
        html.outputLocation = file('jacoco/html')
        xml.outputLocation = file('jacoco/jacoco.xml')
    }
    subprojects.each {
        sourceSets it.sourceSets.main
    }
    executionData fileTree(project.rootDir.absolutePath).include("jacoco/*.exec")
}

// ------------ Spotbugs configuration  ---------
spotbugsMain {
    reports {
        xml {
            required = false
        }
        html {
            required = true
        }
    }
    onlyAnalyze = [
        "org.clematis.math.algorithm.*" ,
        "org.clematis.math.io.*" ,
        "org.clematis.math.operators.*" ,
        "org.clematis.math.utils.*" ,
        "org.clematis.math.*"
    ]
    ignoreFailures = true
}

spotbugsTest {
    reports {
        xml {
            required = false
        }
        html {
            required = true
        }
    }
    onlyAnalyze = [
            "org.clematis.math.algorithm.*" ,
            "org.clematis.math.io.*" ,
            "org.clematis.math.operators.*" ,
            "org.clematis.math.utils.*" ,
            "org.clematis.math.*"
    ]
}

repositories {
    maven {
        name = "GitHubPackages"
        url = "https://maven.pkg.github.com/grauds/clematis.math.parser"
        credentials {
            username = System.getenv("USERNAME")
            password = System.getenv("TOKEN")
        }
    }
}